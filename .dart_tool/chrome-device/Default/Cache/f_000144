define(['dart_sdk', 'packages/flutter/src/painting/strut_style.dart', 'packages/syncfusion_flutter_core/core.dart', 'packages/flutter/src/widgets/widget_span.dart', 'packages/flutter/src/animation/animation_controller.dart', 'packages/flutter/src/animation/listener_helpers.dart', 'packages/flutter/src/animation/curves.dart', 'packages/vector_math/vector_math_64.dart', 'packages/flutter/src/rendering/layer.dart', 'packages/flutter/src/material/colors.dart', 'packages/flutter/src/painting/decoration_image.dart', 'packages/flutter/src/painting/box_fit.dart', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/flutter/src/rendering/shifted_box.dart', 'packages/flutter/src/painting/gradient.dart'], (function load__packages__syncfusion_flutter_core__tooltip_internal_dart(dart_sdk, packages__flutter__src__painting__strut_style$46dart, packages__syncfusion_flutter_core__core$46dart, packages__flutter__src__widgets__widget_span$46dart, packages__flutter__src__animation__animation_controller$46dart, packages__flutter__src__animation__listener_helpers$46dart, packages__flutter__src__animation__curves$46dart, packages__vector_math__vector_math_64$46dart, packages__flutter__src__rendering__layer$46dart, packages__flutter__src__material__colors$46dart, packages__flutter__src__painting__decoration_image$46dart, packages__flutter__src__painting__box_fit$46dart, packages__flutter__src__painting__placeholder_span$46dart, packages__flutter__src__rendering__shifted_box$46dart, packages__flutter__src__painting__gradient$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const _internal = dart_sdk._internal;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_style = packages__flutter__src__painting__strut_style$46dart.src__painting__text_style;
  const core$ = packages__syncfusion_flutter_core__core$46dart.core;
  const framework = packages__flutter__src__widgets__widget_span$46dart.src__widgets__framework;
  const container = packages__flutter__src__widgets__widget_span$46dart.src__widgets__container;
  const widget_inspector = packages__flutter__src__widgets__widget_span$46dart.src__widgets__widget_inspector;
  const transitions = packages__flutter__src__widgets__widget_span$46dart.src__widgets__transitions;
  const ticker_provider = packages__flutter__src__widgets__widget_span$46dart.src__widgets__ticker_provider;
  const animation_controller = packages__flutter__src__animation__animation_controller$46dart.src__animation__animation_controller;
  const tween = packages__flutter__src__animation__listener_helpers$46dart.src__animation__tween;
  const animations = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animations;
  const animation = packages__flutter__src__animation__listener_helpers$46dart.src__animation__animation;
  const curves = packages__flutter__src__animation__curves$46dart.src__animation__curves;
  const vector_math_64 = packages__vector_math__vector_math_64$46dart.vector_math_64;
  const object = packages__flutter__src__rendering__layer$46dart.src__rendering__object;
  const colors = packages__flutter__src__material__colors$46dart.src__material__colors;
  const decoration_image = packages__flutter__src__painting__decoration_image$46dart.src__painting__decoration_image;
  const box_fit = packages__flutter__src__painting__box_fit$46dart.src__painting__box_fit;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const shifted_box = packages__flutter__src__rendering__shifted_box$46dart.src__rendering__shifted_box;
  const gradient = packages__flutter__src__painting__gradient$46dart.src__painting__gradient;
  var tooltip_internal = Object.create(dart.library);
  var $toDouble = dartx.toDouble;
  var $isNotEmpty = dartx.isNotEmpty;
  var $length = dartx.length;
  var $split = dartx.split;
  var $_get = dartx._get;
  var $_set = dartx._set;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    StateOfStatefulWidget: () => (T.StateOfStatefulWidget = dart.constFn(framework.State$(framework.StatefulWidget)))(),
    GlobalKeyOfStateOfStatefulWidget: () => (T.GlobalKeyOfStateOfStatefulWidget = dart.constFn(framework.GlobalKey$(T.StateOfStatefulWidget())))(),
    VoidTovoid: () => (T.VoidTovoid = dart.constFn(dart.fnType(dart.void, [])))(),
    TweenOfdouble: () => (T.TweenOfdouble = dart.constFn(tween.Tween$(core.double)))(),
    _LocationL: () => (T._LocationL = dart.constFn(dart.legacy(widget_inspector._Location)))(),
    WidgetN: () => (T.WidgetN = dart.constFn(dart.nullable(framework.Widget)))(),
    BuildContextAndWidgetNToWidget: () => (T.BuildContextAndWidgetNToWidget = dart.constFn(dart.fnType(framework.Widget, [framework.BuildContext, T.WidgetN()])))(),
    DataMarkerTypeN: () => (T.DataMarkerTypeN = dart.constFn(dart.nullable(core$.DataMarkerType)))(),
    JSArrayOfDataMarkerTypeN: () => (T.JSArrayOfDataMarkerTypeN = dart.constFn(_interceptors.JSArray$(T.DataMarkerTypeN())))(),
    PaintN: () => (T.PaintN = dart.constFn(dart.nullable(ui.Paint)))(),
    JSArrayOfPaintN: () => (T.JSArrayOfPaintN = dart.constFn(_interceptors.JSArray$(T.PaintN())))(),
    PaintingContextAndOffsetTovoid: () => (T.PaintingContextAndOffsetTovoid = dart.constFn(dart.fnType(dart.void, [object.PaintingContext, ui.Offset])))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: text_style.TextStyle.prototype,
        [TextStyle_fontFeatures]: null,
        [TextStyle_shadows]: null,
        [TextStyle_debugLabel]: null,
        [TextStyle_decorationThickness]: null,
        [TextStyle_decorationStyle]: null,
        [TextStyle_decorationColor]: null,
        [TextStyle_decoration]: null,
        [TextStyle_background]: null,
        [TextStyle_foreground]: null,
        [TextStyle_locale]: null,
        [TextStyle_height]: null,
        [TextStyle_textBaseline]: null,
        [TextStyle_wordSpacing]: null,
        [TextStyle_letterSpacing]: null,
        [TextStyle_fontStyle]: null,
        [TextStyle_fontWeight]: null,
        [TextStyle_fontSize]: null,
        [TextStyle__package]: null,
        [TextStyle__fontFamilyFallback]: null,
        [TextStyle_fontFamily]: null,
        [TextStyle_backgroundColor]: null,
        [TextStyle_color]: null,
        [TextStyle_inherit]: true
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4278190080.0
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core$.TooltipAlignment.prototype,
        [_name]: "TooltipAlignment.near",
        index: 0
      });
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: ui.Color.prototype,
        [Color_value]: 4294967295.0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: curves.Cubic.prototype,
        [Cubic_d]: 1.275,
        [Cubic_c]: 0.32,
        [Cubic_b]: 0.885,
        [Cubic_a]: 0.175
      });
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: curves.Interval.prototype,
        [Interval_curve]: C[5] || CT.C5,
        [Interval_end]: 0.8,
        [Interval_begin]: 0.1
      });
    },
    get C7() {
      return C[7] = dart.constList([], T._LocationL());
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[7] || CT.C7,
        [_Location_name]: null,
        [_Location_column]: 56,
        [_Location_line]: 216,
        [_Location_file]: "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/tooltip/tooltip.dart"
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "template",
        [_Location_column]: 11,
        [_Location_line]: 226,
        [_Location_file]: null
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipAnimation",
        [_Location_column]: 11,
        [_Location_line]: 227,
        [_Location_file]: null
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "tooltipState",
        [_Location_column]: 11,
        [_Location_line]: 228,
        [_Location_file]: null
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animationController",
        [_Location_column]: 11,
        [_Location_line]: 229,
        [_Location_file]: null
      });
    },
    get C9() {
      return C[9] = dart.constList([C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13], T._LocationL());
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[9] || CT.C9,
        [_Location_name]: null,
        [_Location_column]: 14,
        [_Location_line]: 225,
        [_Location_file]: "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/tooltip/tooltip.dart"
      });
    },
    get C16() {
      return C[16] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "animation",
        [_Location_column]: 7,
        [_Location_line]: 218,
        [_Location_file]: null
      });
    },
    get C17() {
      return C[17] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "builder",
        [_Location_column]: 7,
        [_Location_line]: 219,
        [_Location_file]: null
      });
    },
    get C18() {
      return C[18] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: null,
        [_Location_name]: "child",
        [_Location_column]: 7,
        [_Location_line]: 225,
        [_Location_file]: null
      });
    },
    get C15() {
      return C[15] = dart.constList([C[16] || CT.C16, C[17] || CT.C17, C[18] || CT.C18], T._LocationL());
    },
    get C14() {
      return C[14] = dart.const({
        __proto__: widget_inspector._Location.prototype,
        [_Location_parameterLocations]: C[15] || CT.C15,
        [_Location_name]: null,
        [_Location_column]: 12,
        [_Location_line]: 217,
        [_Location_file]: "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/tooltip/tooltip.dart"
      });
    },
    get C19() {
      return C[19] = dart.const({
        __proto__: ui.Rect.prototype,
        [Rect_bottom]: 0,
        [Rect_right]: 0,
        [Rect_top]: 0,
        [Rect_left]: 0
      });
    },
    get C20() {
      return C[20] = dart.const({
        __proto__: ui.Size.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C21() {
      return C[21] = dart.const({
        __proto__: ui.Offset.prototype,
        [OffsetBase__dy]: 0,
        [OffsetBase__dx]: 0
      });
    },
    get C22() {
      return C[22] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.circle",
        index: 0
      });
    },
    get C23() {
      return C[23] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.rectangle",
        index: 1
      });
    },
    get C24() {
      return C[24] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.image",
        index: 2
      });
    },
    get C25() {
      return C[25] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.pentagon",
        index: 3
      });
    },
    get C26() {
      return C[26] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.verticalLine",
        index: 4
      });
    },
    get C27() {
      return C[27] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.invertedTriangle",
        index: 8
      });
    },
    get C28() {
      return C[28] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.horizontalLine",
        index: 5
      });
    },
    get C29() {
      return C[29] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.diamond",
        index: 6
      });
    },
    get C30() {
      return C[30] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.triangle",
        index: 7
      });
    },
    get C31() {
      return C[31] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name]: "DataMarkerType.none",
        index: 9
      });
    }
  }, false);
  var C = Array(32).fill(void 0);
  var I = [
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/tooltip/tooltip.dart",
    "package:syncfusion_flutter_core/tooltip_internal.dart"
  ];
  var enable$ = dart.privateName(tooltip_internal, "SfTooltip.enable");
  var color$ = dart.privateName(tooltip_internal, "SfTooltip.color");
  var labelColor$ = dart.privateName(tooltip_internal, "SfTooltip.labelColor");
  var borderColor$ = dart.privateName(tooltip_internal, "SfTooltip.borderColor");
  var shadowColor$ = dart.privateName(tooltip_internal, "SfTooltip.shadowColor");
  var header$ = dart.privateName(tooltip_internal, "SfTooltip.header");
  var opacity$ = dart.privateName(tooltip_internal, "SfTooltip.opacity");
  var textStyle$ = dart.privateName(tooltip_internal, "SfTooltip.textStyle");
  var decimalPlaces$ = dart.privateName(tooltip_internal, "SfTooltip.decimalPlaces");
  var format$ = dart.privateName(tooltip_internal, "SfTooltip.format");
  var animationDuration$ = dart.privateName(tooltip_internal, "SfTooltip.animationDuration");
  var canShowMarker$ = dart.privateName(tooltip_internal, "SfTooltip.canShowMarker");
  var borderWidth$ = dart.privateName(tooltip_internal, "SfTooltip.borderWidth");
  var builder$ = dart.privateName(tooltip_internal, "SfTooltip.builder");
  var elevation$ = dart.privateName(tooltip_internal, "SfTooltip.elevation");
  var shouldAlwaysShow$ = dart.privateName(tooltip_internal, "SfTooltip.shouldAlwaysShow");
  var duration$ = dart.privateName(tooltip_internal, "SfTooltip.duration");
  var textAlignment$ = dart.privateName(tooltip_internal, "SfTooltip.textAlignment");
  var shared$ = dart.privateName(tooltip_internal, "SfTooltip.shared");
  var onTooltipRender$ = dart.privateName(tooltip_internal, "SfTooltip.onTooltipRender");
  var TextStyle_fontFeatures = dart.privateName(text_style, "TextStyle.fontFeatures");
  var TextStyle_shadows = dart.privateName(text_style, "TextStyle.shadows");
  var TextStyle_debugLabel = dart.privateName(text_style, "TextStyle.debugLabel");
  var TextStyle_decorationThickness = dart.privateName(text_style, "TextStyle.decorationThickness");
  var TextStyle_decorationStyle = dart.privateName(text_style, "TextStyle.decorationStyle");
  var TextStyle_decorationColor = dart.privateName(text_style, "TextStyle.decorationColor");
  var TextStyle_decoration = dart.privateName(text_style, "TextStyle.decoration");
  var TextStyle_background = dart.privateName(text_style, "TextStyle.background");
  var TextStyle_foreground = dart.privateName(text_style, "TextStyle.foreground");
  var TextStyle_locale = dart.privateName(text_style, "TextStyle.locale");
  var TextStyle_height = dart.privateName(text_style, "TextStyle.height");
  var TextStyle_textBaseline = dart.privateName(text_style, "TextStyle.textBaseline");
  var TextStyle_wordSpacing = dart.privateName(text_style, "TextStyle.wordSpacing");
  var TextStyle_letterSpacing = dart.privateName(text_style, "TextStyle.letterSpacing");
  var TextStyle_fontStyle = dart.privateName(text_style, "TextStyle.fontStyle");
  var TextStyle_fontWeight = dart.privateName(text_style, "TextStyle.fontWeight");
  var TextStyle_fontSize = dart.privateName(text_style, "TextStyle.fontSize");
  var TextStyle__package = dart.privateName(text_style, "TextStyle._package");
  var TextStyle__fontFamilyFallback = dart.privateName(text_style, "TextStyle._fontFamilyFallback");
  var TextStyle_fontFamily = dart.privateName(text_style, "TextStyle.fontFamily");
  var TextStyle_backgroundColor = dart.privateName(text_style, "TextStyle.backgroundColor");
  var TextStyle_color = dart.privateName(text_style, "TextStyle.color");
  var TextStyle_inherit = dart.privateName(text_style, "TextStyle.inherit");
  var Color_value = dart.privateName(ui, "Color.value");
  var _name = dart.privateName(core$, "_name");
  var _show = dart.privateName(tooltip_internal, "_show");
  var _template = dart.privateName(tooltip_internal, "_template");
  tooltip_internal.SfTooltip = class SfTooltip extends framework.StatefulWidget {
    get enable() {
      return this[enable$];
    }
    set enable(value) {
      super.enable = value;
    }
    get color() {
      return this[color$];
    }
    set color(value) {
      super.color = value;
    }
    get labelColor() {
      return this[labelColor$];
    }
    set labelColor(value) {
      super.labelColor = value;
    }
    get borderColor() {
      return this[borderColor$];
    }
    set borderColor(value) {
      super.borderColor = value;
    }
    get shadowColor() {
      return this[shadowColor$];
    }
    set shadowColor(value) {
      super.shadowColor = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      super.header = value;
    }
    get opacity() {
      return this[opacity$];
    }
    set opacity(value) {
      super.opacity = value;
    }
    get textStyle() {
      return this[textStyle$];
    }
    set textStyle(value) {
      super.textStyle = value;
    }
    get decimalPlaces() {
      return this[decimalPlaces$];
    }
    set decimalPlaces(value) {
      super.decimalPlaces = value;
    }
    get format() {
      return this[format$];
    }
    set format(value) {
      super.format = value;
    }
    get animationDuration() {
      return this[animationDuration$];
    }
    set animationDuration(value) {
      super.animationDuration = value;
    }
    get canShowMarker() {
      return this[canShowMarker$];
    }
    set canShowMarker(value) {
      super.canShowMarker = value;
    }
    get borderWidth() {
      return this[borderWidth$];
    }
    set borderWidth(value) {
      super.borderWidth = value;
    }
    get builder() {
      return this[builder$];
    }
    set builder(value) {
      super.builder = value;
    }
    get elevation() {
      return this[elevation$];
    }
    set elevation(value) {
      super.elevation = value;
    }
    get shouldAlwaysShow() {
      return this[shouldAlwaysShow$];
    }
    set shouldAlwaysShow(value) {
      super.shouldAlwaysShow = value;
    }
    get duration() {
      return this[duration$];
    }
    set duration(value) {
      super.duration = value;
    }
    get textAlignment() {
      return this[textAlignment$];
    }
    set textAlignment(value) {
      super.textAlignment = value;
    }
    get shared() {
      return this[shared$];
    }
    set shared(value) {
      super.shared = value;
    }
    get onTooltipRender() {
      return this[onTooltipRender$];
    }
    set onTooltipRender(value) {
      super.onTooltipRender = value;
    }
    show(position, duration, template = null) {
      let t0;
      if (duration == null) dart.nullFailed(I[0], 139, 35, "duration");
      if (position != null) {
        let tooltipKey = T.GlobalKeyOfStateOfStatefulWidget().as(dart.nullCheck(this.key));
        let state = tooltip_internal.SfTooltipState.as(dart.nullCheck(tooltipKey.currentState));
        dart.nullCheck(state.animationController).duration = new core.Duration.new({milliseconds: duration});
        t0 = state.renderBox;
        t0 == null ? null : t0.calculateLocation(position);
        state[_show] = true;
        if (template == null) {
          state.setState(dart.fn(() => {
          }, T.VoidTovoid()));
        } else {
          state[_template] = template;
          state.setState(dart.fn(() => {
          }, T.VoidTovoid()));
        }
      }
    }
    hide(duration = null) {
      let t0;
      let tooltipKey = T.GlobalKeyOfStateOfStatefulWidget().as(dart.nullCheck(this.key));
      let state = tooltip_internal.SfTooltipState.as(dart.nullCheck(tooltipKey.currentState));
      state[_show] = false;
      dart.nullCheck(state.animationController).duration = new core.Duration.new({milliseconds: (t0 = duration, t0 == null ? 0 : t0)});
      dart.nullCheck(state.animationController).reverse({from: 1.0});
    }
    createState() {
      return new tooltip_internal.SfTooltipState.new();
    }
  };
  (tooltip_internal.SfTooltip.new = function(opts) {
    let textStyle = opts && 'textStyle' in opts ? opts.textStyle : C[0] || CT.C0;
    if (textStyle == null) dart.nullFailed(I[0], 10, 13, "textStyle");
    let animationDuration = opts && 'animationDuration' in opts ? opts.animationDuration : 500;
    if (animationDuration == null) dart.nullFailed(I[0], 11, 12, "animationDuration");
    let enable = opts && 'enable' in opts ? opts.enable : true;
    if (enable == null) dart.nullFailed(I[0], 12, 12, "enable");
    let opacity = opts && 'opacity' in opts ? opts.opacity : 1;
    if (opacity == null) dart.nullFailed(I[0], 13, 12, "opacity");
    let borderColor = opts && 'borderColor' in opts ? opts.borderColor : C[1] || CT.C1;
    if (borderColor == null) dart.nullFailed(I[0], 14, 12, "borderColor");
    let borderWidth = opts && 'borderWidth' in opts ? opts.borderWidth : 0;
    if (borderWidth == null) dart.nullFailed(I[0], 15, 12, "borderWidth");
    let duration = opts && 'duration' in opts ? opts.duration : 3000;
    if (duration == null) dart.nullFailed(I[0], 16, 12, "duration");
    let shouldAlwaysShow = opts && 'shouldAlwaysShow' in opts ? opts.shouldAlwaysShow : false;
    if (shouldAlwaysShow == null) dart.nullFailed(I[0], 17, 12, "shouldAlwaysShow");
    let elevation = opts && 'elevation' in opts ? opts.elevation : 0;
    if (elevation == null) dart.nullFailed(I[0], 18, 12, "elevation");
    let shared = opts && 'shared' in opts ? opts.shared : false;
    if (shared == null) dart.nullFailed(I[0], 19, 12, "shared");
    let canShowMarker = opts && 'canShowMarker' in opts ? opts.canShowMarker : true;
    if (canShowMarker == null) dart.nullFailed(I[0], 20, 12, "canShowMarker");
    let textAlignment = opts && 'textAlignment' in opts ? opts.textAlignment : C[2] || CT.C2;
    let decimalPlaces = opts && 'decimalPlaces' in opts ? opts.decimalPlaces : 2;
    if (decimalPlaces == null) dart.nullFailed(I[0], 22, 12, "decimalPlaces");
    let color = opts && 'color' in opts ? opts.color : C[1] || CT.C1;
    if (color == null) dart.nullFailed(I[0], 23, 12, "color");
    let labelColor = opts && 'labelColor' in opts ? opts.labelColor : C[3] || CT.C3;
    if (labelColor == null) dart.nullFailed(I[0], 24, 12, "labelColor");
    let header = opts && 'header' in opts ? opts.header : null;
    let format = opts && 'format' in opts ? opts.format : null;
    let builder = opts && 'builder' in opts ? opts.builder : null;
    let shadowColor = opts && 'shadowColor' in opts ? opts.shadowColor : null;
    let key = opts && 'key' in opts ? opts.key : null;
    let onTooltipRender = opts && 'onTooltipRender' in opts ? opts.onTooltipRender : null;
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[textStyle$] = textStyle;
    this[animationDuration$] = animationDuration;
    this[enable$] = enable;
    this[opacity$] = opacity;
    this[borderColor$] = borderColor;
    this[borderWidth$] = borderWidth;
    this[duration$] = duration;
    this[shouldAlwaysShow$] = shouldAlwaysShow;
    this[elevation$] = elevation;
    this[shared$] = shared;
    this[canShowMarker$] = canShowMarker;
    this[textAlignment$] = textAlignment;
    this[decimalPlaces$] = decimalPlaces;
    this[color$] = color;
    this[labelColor$] = labelColor;
    this[header$] = header;
    this[format$] = format;
    this[builder$] = builder;
    this[shadowColor$] = shadowColor;
    this[onTooltipRender$] = onTooltipRender;
    tooltip_internal.SfTooltip.__proto__.new.call(this, {key: key, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tooltip_internal.SfTooltip.prototype;
  dart.addTypeTests(tooltip_internal.SfTooltip);
  dart.addTypeCaches(tooltip_internal.SfTooltip);
  dart.setMethodSignature(tooltip_internal.SfTooltip, () => ({
    __proto__: dart.getMethods(tooltip_internal.SfTooltip.__proto__),
    show: dart.fnType(dart.void, [dart.nullable(ui.Offset), core.int], [dart.nullable(framework.Widget)]),
    hide: dart.fnType(dart.void, [], [dart.nullable(core.int)]),
    createState: dart.fnType(tooltip_internal.SfTooltipState, [])
  }));
  dart.setLibraryUri(tooltip_internal.SfTooltip, I[1]);
  dart.setFieldSignature(tooltip_internal.SfTooltip, () => ({
    __proto__: dart.getFields(tooltip_internal.SfTooltip.__proto__),
    enable: dart.finalFieldType(core.bool),
    color: dart.finalFieldType(ui.Color),
    labelColor: dart.finalFieldType(ui.Color),
    borderColor: dart.finalFieldType(ui.Color),
    shadowColor: dart.finalFieldType(dart.nullable(ui.Color)),
    header: dart.finalFieldType(dart.nullable(core.String)),
    opacity: dart.finalFieldType(core.double),
    textStyle: dart.finalFieldType(text_style.TextStyle),
    decimalPlaces: dart.finalFieldType(core.int),
    format: dart.finalFieldType(dart.nullable(core.String)),
    animationDuration: dart.finalFieldType(core.int),
    canShowMarker: dart.finalFieldType(core.bool),
    borderWidth: dart.finalFieldType(core.double),
    builder: dart.finalFieldType(dart.dynamic),
    elevation: dart.finalFieldType(core.double),
    shouldAlwaysShow: dart.finalFieldType(core.bool),
    duration: dart.finalFieldType(core.double),
    textAlignment: dart.finalFieldType(dart.dynamic),
    shared: dart.finalFieldType(core.bool),
    onTooltipRender: dart.finalFieldType(dart.nullable(dart.fnType(dart.void, [core$.TooltipRenderArgs])))
  }));
  var animationController = dart.privateName(tooltip_internal, "SfTooltipState.animationController");
  var renderBox = dart.privateName(tooltip_internal, "SfTooltipState.renderBox");
  var __SfTooltipState__show = dart.privateName(tooltip_internal, "_#SfTooltipState#_show");
  var __SfTooltipState__show_isSet = dart.privateName(tooltip_internal, "_#SfTooltipState#_show#isSet");
  var __SfTooltipState_needMarker = dart.privateName(tooltip_internal, "_#SfTooltipState#needMarker");
  var __SfTooltipState_needMarker_isSet = dart.privateName(tooltip_internal, "_#SfTooltipState#needMarker#isSet");
  var __SfTooltipState__shared = dart.privateName(tooltip_internal, "_#SfTooltipState#_shared");
  var __SfTooltipState__shared_isSet = dart.privateName(tooltip_internal, "_#SfTooltipState#_shared#isSet");
  var _shared = dart.privateName(tooltip_internal, "_shared");
  var Cubic_d = dart.privateName(curves, "Cubic.d");
  var Cubic_c = dart.privateName(curves, "Cubic.c");
  var Cubic_b = dart.privateName(curves, "Cubic.b");
  var Cubic_a = dart.privateName(curves, "Cubic.a");
  var Interval_curve = dart.privateName(curves, "Interval.curve");
  var Interval_end = dart.privateName(curves, "Interval.end");
  var Interval_begin = dart.privateName(curves, "Interval.begin");
  var _Location_parameterLocations = dart.privateName(widget_inspector, "_Location.parameterLocations");
  var _Location_name = dart.privateName(widget_inspector, "_Location.name");
  var _Location_column = dart.privateName(widget_inspector, "_Location.column");
  var _Location_line = dart.privateName(widget_inspector, "_Location.line");
  var _Location_file = dart.privateName(widget_inspector, "_Location.file");
  const State_SingleTickerProviderStateMixin$36 = class State_SingleTickerProviderStateMixin extends framework.State$(tooltip_internal.SfTooltip) {};
  (State_SingleTickerProviderStateMixin$36.new = function() {
    ticker_provider.SingleTickerProviderStateMixin$(tooltip_internal.SfTooltip)[dart.mixinNew].call(this);
    State_SingleTickerProviderStateMixin$36.__proto__.new.call(this);
  }).prototype = State_SingleTickerProviderStateMixin$36.prototype;
  dart.applyMixin(State_SingleTickerProviderStateMixin$36, ticker_provider.SingleTickerProviderStateMixin$(tooltip_internal.SfTooltip));
  tooltip_internal.SfTooltipState = class SfTooltipState extends State_SingleTickerProviderStateMixin$36 {
    get animationController() {
      return this[animationController];
    }
    set animationController(value) {
      this[animationController] = value;
    }
    get renderBox() {
      return this[renderBox];
    }
    set renderBox(value) {
      this[renderBox] = value;
    }
    get [_show]() {
      let t0;
      return dart.test(this[__SfTooltipState__show_isSet]) ? (t0 = this[__SfTooltipState__show], t0) : dart.throw(new _internal.LateError.fieldNI("_show"));
    }
    set [_show](t0) {
      if (t0 == null) dart.nullFailed(I[0], 181, 13, "null");
      this[__SfTooltipState__show_isSet] = true;
      this[__SfTooltipState__show] = t0;
    }
    get needMarker() {
      let t1;
      return dart.test(this[__SfTooltipState_needMarker_isSet]) ? (t1 = this[__SfTooltipState_needMarker], t1) : dart.throw(new _internal.LateError.fieldNI("needMarker"));
    }
    set needMarker(t1) {
      if (t1 == null) dart.nullFailed(I[0], 184, 13, "null");
      this[__SfTooltipState_needMarker_isSet] = true;
      this[__SfTooltipState_needMarker] = t1;
    }
    get [_shared]() {
      let t2;
      return dart.test(this[__SfTooltipState__shared_isSet]) ? (t2 = this[__SfTooltipState__shared], t2) : dart.throw(new _internal.LateError.fieldNI("_shared"));
    }
    set [_shared](t2) {
      if (t2 == null) dart.nullFailed(I[0], 192, 13, "null");
      this[__SfTooltipState__shared_isSet] = true;
      this[__SfTooltipState__shared] = t2;
    }
    initState() {
      this[_show] = false;
      this.needMarker = this.widget.canShowMarker;
      this[_shared] = this.widget.shared;
      this.animationController = new animation_controller.AnimationController.new({duration: new core.Duration.new({milliseconds: this.widget.animationDuration}), vsync: this});
      super.initState();
    }
    build(context) {
      let t3;
      if (context == null) dart.nullFailed(I[0], 207, 29, "context");
      let tooltipAnimation = new (T.TweenOfdouble()).new({begin: 0.0, end: 1.0}).animate(new animations.CurvedAnimation.new({parent: dart.nullCheck(this.animationController), curve: C[4] || CT.C4}));
      if (dart.test(this[_show])) {
        dart.nullCheck(this.animationController).forward({from: 0.0});
      }
      this[_template] = this.widget.builder != null ? (t3 = this[_template], t3 == null ? new container.Container.new({$creationLocationd_0dea112b090073317d4: C[6] || CT.C6}) : t3) : null;
      return new transitions.AnimatedBuilder.new({animation: dart.nullCheck(this.animationController), builder: dart.fn((context, child) => {
          if (context == null) dart.nullFailed(I[0], 219, 30, "context");
          if (this.renderBox != null) {
            dart.nullCheck(this.renderBox).animationFactor = dart.nullCheck(this.animationController).value;
          }
          return dart.nullCheck(child);
        }, T.BuildContextAndWidgetNToWidget()), child: new tooltip_internal.TooltipRenderObject.new({template: this[_template], tooltipAnimation: tooltipAnimation, tooltipState: this, animationController: dart.nullCheck(this.animationController), $creationLocationd_0dea112b090073317d4: C[8] || CT.C8}), $creationLocationd_0dea112b090073317d4: C[14] || CT.C14});
    }
    dispose() {
      dart.nullCheck(this.animationController).dispose();
      this.animationController = null;
      super.dispose();
    }
  };
  (tooltip_internal.SfTooltipState.new = function() {
    this[animationController] = null;
    this[__SfTooltipState__show] = null;
    this[__SfTooltipState__show_isSet] = false;
    this[__SfTooltipState_needMarker] = null;
    this[__SfTooltipState_needMarker_isSet] = false;
    this[renderBox] = null;
    this[_template] = null;
    this[__SfTooltipState__shared] = null;
    this[__SfTooltipState__shared_isSet] = false;
    tooltip_internal.SfTooltipState.__proto__.new.call(this);
    ;
  }).prototype = tooltip_internal.SfTooltipState.prototype;
  dart.addTypeTests(tooltip_internal.SfTooltipState);
  dart.addTypeCaches(tooltip_internal.SfTooltipState);
  dart.setMethodSignature(tooltip_internal.SfTooltipState, () => ({
    __proto__: dart.getMethods(tooltip_internal.SfTooltipState.__proto__),
    build: dart.fnType(framework.Widget, [framework.BuildContext])
  }));
  dart.setGetterSignature(tooltip_internal.SfTooltipState, () => ({
    __proto__: dart.getGetters(tooltip_internal.SfTooltipState.__proto__),
    [_show]: core.bool,
    needMarker: core.bool,
    [_shared]: core.bool
  }));
  dart.setSetterSignature(tooltip_internal.SfTooltipState, () => ({
    __proto__: dart.getSetters(tooltip_internal.SfTooltipState.__proto__),
    [_show]: core.bool,
    needMarker: core.bool,
    [_shared]: core.bool
  }));
  dart.setLibraryUri(tooltip_internal.SfTooltipState, I[1]);
  dart.setFieldSignature(tooltip_internal.SfTooltipState, () => ({
    __proto__: dart.getFields(tooltip_internal.SfTooltipState.__proto__),
    animationController: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__SfTooltipState__show]: dart.fieldType(dart.nullable(core.bool)),
    [__SfTooltipState__show_isSet]: dart.fieldType(core.bool),
    [__SfTooltipState_needMarker]: dart.fieldType(dart.nullable(core.bool)),
    [__SfTooltipState_needMarker_isSet]: dart.fieldType(core.bool),
    renderBox: dart.fieldType(dart.nullable(tooltip_internal.TooltipRenderBox)),
    [_template]: dart.fieldType(dart.nullable(framework.Widget)),
    [__SfTooltipState__shared]: dart.fieldType(dart.nullable(core.bool)),
    [__SfTooltipState__shared_isSet]: dart.fieldType(core.bool)
  }));
  var _tooltipState$ = dart.privateName(tooltip_internal, "_tooltipState");
  var _tooltipAnimation = dart.privateName(tooltip_internal, "_tooltipAnimation");
  var _animationController = dart.privateName(tooltip_internal, "_animationController");
  tooltip_internal.TooltipRenderObject = class TooltipRenderObject extends framework.SingleChildRenderObjectWidget {
    createRenderObject(context) {
      if (context == null) dart.nullFailed(I[0], 260, 52, "context");
      this[_tooltipState$].renderBox = new tooltip_internal.TooltipRenderBox.new(this[_tooltipState$], this[_tooltipAnimation], this[_animationController]);
      return dart.nullCheck(this[_tooltipState$].renderBox);
    }
    updateRenderObject(context, renderObject) {
      let t3;
      if (context == null) dart.nullFailed(I[0], 267, 40, "context");
      tooltip_internal.TooltipRenderBox.as(renderObject);
      if (renderObject == null) dart.nullFailed(I[0], 267, 66, "renderObject");
      t3 = renderObject;
      (() => {
        t3.tooltipAnimation = this[_tooltipAnimation];
        t3.animationController = this[_animationController];
        t3.tooltipState = this[_tooltipState$];
        return t3;
      })();
    }
  };
  (tooltip_internal.TooltipRenderObject.new = function(opts) {
    let template = opts && 'template' in opts ? opts.template : null;
    let tooltipState = opts && 'tooltipState' in opts ? opts.tooltipState : null;
    if (tooltipState == null) dart.nullFailed(I[0], 247, 31, "tooltipState");
    let tooltipAnimation = opts && 'tooltipAnimation' in opts ? opts.tooltipAnimation : null;
    if (tooltipAnimation == null) dart.nullFailed(I[0], 248, 34, "tooltipAnimation");
    let animationController = opts && 'animationController' in opts ? opts.animationController : null;
    if (animationController == null) dart.nullFailed(I[0], 249, 36, "animationController");
    let $36creationLocationd_0dea112b090073317d4 = opts && '$creationLocationd_0dea112b090073317d4' in opts ? opts.$creationLocationd_0dea112b090073317d4 : null;
    this[_tooltipState$] = tooltipState;
    this[_tooltipAnimation] = tooltipAnimation;
    this[_animationController] = animationController;
    tooltip_internal.TooltipRenderObject.__proto__.new.call(this, {child: template, $creationLocationd_0dea112b090073317d4: $36creationLocationd_0dea112b090073317d4});
    ;
  }).prototype = tooltip_internal.TooltipRenderObject.prototype;
  dart.addTypeTests(tooltip_internal.TooltipRenderObject);
  dart.addTypeCaches(tooltip_internal.TooltipRenderObject);
  dart.setMethodSignature(tooltip_internal.TooltipRenderObject, () => ({
    __proto__: dart.getMethods(tooltip_internal.TooltipRenderObject.__proto__),
    createRenderObject: dart.fnType(tooltip_internal.TooltipRenderBox, [framework.BuildContext])
  }));
  dart.setLibraryUri(tooltip_internal.TooltipRenderObject, I[1]);
  dart.setFieldSignature(tooltip_internal.TooltipRenderObject, () => ({
    __proto__: dart.getFields(tooltip_internal.TooltipRenderObject.__proto__),
    [_tooltipState$]: dart.finalFieldType(tooltip_internal.SfTooltipState),
    [_tooltipAnimation]: dart.finalFieldType(animation.Animation$(core.double)),
    [_animationController]: dart.finalFieldType(animation_controller.AnimationController)
  }));
  var __TooltipRenderBox__tooltipAnimation = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_tooltipAnimation");
  var __TooltipRenderBox__tooltipAnimation_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_tooltipAnimation#isSet");
  var __TooltipRenderBox__animationController = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_animationController");
  var __TooltipRenderBox__animationController_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_animationController#isSet");
  var __TooltipRenderBox__animationFactor = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_animationFactor");
  var __TooltipRenderBox__animationFactor_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_animationFactor#isSet");
  var _stringValue = dart.privateName(tooltip_internal, "_stringValue");
  var _header = dart.privateName(tooltip_internal, "_header");
  var _normalPadding = dart.privateName(tooltip_internal, "_normalPadding");
  var _inversePadding = dart.privateName(tooltip_internal, "_inversePadding");
  var __TooltipRenderBox__markerSize = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_markerSize");
  var __TooltipRenderBox__markerSize_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_markerSize#isSet");
  var _canResetPath = dart.privateName(tooltip_internal, "_canResetPath");
  var _boundaryRect = dart.privateName(tooltip_internal, "_boundaryRect");
  var Rect_bottom = dart.privateName(ui, "Rect.bottom");
  var Rect_right = dart.privateName(ui, "Rect.right");
  var Rect_top = dart.privateName(ui, "Rect.top");
  var Rect_left = dart.privateName(ui, "Rect.left");
  var _markerTypes = dart.privateName(tooltip_internal, "_markerTypes");
  var _markerPaints = dart.privateName(tooltip_internal, "_markerPaints");
  var _markerImages = dart.privateName(tooltip_internal, "_markerImages");
  var _markerGradients = dart.privateName(tooltip_internal, "_markerGradients");
  var _pointerLength = dart.privateName(tooltip_internal, "_pointerLength");
  var _xPos = dart.privateName(tooltip_internal, "_xPos");
  var _yPos = dart.privateName(tooltip_internal, "_yPos");
  var _x = dart.privateName(tooltip_internal, "_x");
  var _y = dart.privateName(tooltip_internal, "_y");
  var _nosePointX = dart.privateName(tooltip_internal, "_nosePointX");
  var _nosePointY = dart.privateName(tooltip_internal, "_nosePointY");
  var _borderRadius = dart.privateName(tooltip_internal, "_borderRadius");
  var _totalWidth = dart.privateName(tooltip_internal, "_totalWidth");
  var _isLeft = dart.privateName(tooltip_internal, "_isLeft");
  var _isRight = dart.privateName(tooltip_internal, "_isRight");
  var _isTop = dart.privateName(tooltip_internal, "_isTop");
  var _isOutOfBoundInTop = dart.privateName(tooltip_internal, "_isOutOfBoundInTop");
  var __TooltipRenderBox__markerPointY = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_markerPointY");
  var __TooltipRenderBox__markerPointY_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_markerPointY#isSet");
  var _tooltipRect = dart.privateName(tooltip_internal, "_tooltipRect");
  var _arrowPath = dart.privateName(tooltip_internal, "_arrowPath");
  var __TooltipRenderBox__templateSize = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_templateSize");
  var __TooltipRenderBox__templateSize_isSet = dart.privateName(tooltip_internal, "_#TooltipRenderBox#_templateSize#isSet");
  var _tooltip = dart.privateName(tooltip_internal, "_tooltip");
  var _animationFactor = dart.privateName(tooltip_internal, "_animationFactor");
  var _markerSize = dart.privateName(tooltip_internal, "_markerSize");
  var _markerPointY = dart.privateName(tooltip_internal, "_markerPointY");
  var _templateSize = dart.privateName(tooltip_internal, "_templateSize");
  var _renderDefaultTooltipView = dart.privateName(tooltip_internal, "_renderDefaultTooltipView");
  var _renderTemplateTooltipView = dart.privateName(tooltip_internal, "_renderTemplateTooltipView");
  var _getTemplateLocation = dart.privateName(tooltip_internal, "_getTemplateLocation");
  var _renderArrow = dart.privateName(tooltip_internal, "_renderArrow");
  var _calculateBackgroundRect = dart.privateName(tooltip_internal, "_calculateBackgroundRect");
  var _drawTooltipBackground = dart.privateName(tooltip_internal, "_drawTooltipBackground");
  var _drawTooltipPath = dart.privateName(tooltip_internal, "_drawTooltipPath");
  var _drawTooltipText = dart.privateName(tooltip_internal, "_drawTooltipText");
  var _drawMarkers = dart.privateName(tooltip_internal, "_drawMarkers");
  var OffsetBase__dy = dart.privateName(ui, "OffsetBase._dy");
  var OffsetBase__dx = dart.privateName(ui, "OffsetBase._dx");
  var _drawText = dart.privateName(tooltip_internal, "_drawText");
  tooltip_internal.TooltipRenderBox = class TooltipRenderBox extends shifted_box.RenderShiftedBox {
    get [_tooltip]() {
      return this[_tooltipState$].widget;
    }
    set tooltipState(value) {
      if (value == null) dart.nullFailed(I[0], 286, 35, "value");
      if (dart.equals(this[_tooltipState$], value)) {
        return;
      }
      this[_tooltipState$] = value;
    }
    get [_tooltipAnimation]() {
      let t3;
      return dart.test(this[__TooltipRenderBox__tooltipAnimation_isSet]) ? (t3 = this[__TooltipRenderBox__tooltipAnimation], t3) : dart.throw(new _internal.LateError.fieldNI("_tooltipAnimation"));
    }
    set [_tooltipAnimation](t3) {
      if (t3 == null) dart.nullFailed(I[0], 293, 26, "null");
      this[__TooltipRenderBox__tooltipAnimation_isSet] = true;
      this[__TooltipRenderBox__tooltipAnimation] = t3;
    }
    set tooltipAnimation(value) {
      if (value == null) dart.nullFailed(I[0], 296, 42, "value");
      if (dart.equals(this[_tooltipAnimation], value)) {
        return;
      }
      this[_tooltipAnimation] = value;
    }
    get [_animationController]() {
      let t4;
      return dart.test(this[__TooltipRenderBox__animationController_isSet]) ? (t4 = this[__TooltipRenderBox__animationController], t4) : dart.throw(new _internal.LateError.fieldNI("_animationController"));
    }
    set [_animationController](t4) {
      if (t4 == null) dart.nullFailed(I[0], 303, 28, "null");
      this[__TooltipRenderBox__animationController_isSet] = true;
      this[__TooltipRenderBox__animationController] = t4;
    }
    set animationController(value) {
      if (value == null) dart.nullFailed(I[0], 306, 47, "value");
      if (dart.equals(this[_animationController], value)) {
        return;
      }
      this[_animationController] = value;
    }
    get [_animationFactor]() {
      let t5;
      return dart.test(this[__TooltipRenderBox__animationFactor_isSet]) ? (t5 = this[__TooltipRenderBox__animationFactor], t5) : dart.throw(new _internal.LateError.fieldNI("_animationFactor"));
    }
    set [_animationFactor](t5) {
      if (t5 == null) dart.nullFailed(I[0], 313, 15, "null");
      this[__TooltipRenderBox__animationFactor_isSet] = true;
      this[__TooltipRenderBox__animationFactor] = t5;
    }
    set animationFactor(value) {
      if (value == null) dart.nullFailed(I[0], 316, 30, "value");
      this[_animationFactor] = value;
      this.markNeedsLayout();
      this.markNeedsPaint();
      this.markNeedsSemanticsUpdate();
    }
    set stringValue(value) {
      if (this[_stringValue] == value) {
        return;
      }
      this[_stringValue] = value;
    }
    set header(value) {
      if (this[_header] == value) {
        return;
      }
      this[_header] = value;
    }
    set normalPadding(value) {
      if (value == null) dart.nullFailed(I[0], 346, 28, "value");
      if (this[_normalPadding] == value) {
        return;
      }
      this[_normalPadding] = value;
    }
    set inversePadding(value) {
      if (value == null) dart.nullFailed(I[0], 356, 29, "value");
      if (this[_inversePadding] == value) {
        return;
      }
      this[_inversePadding] = value;
    }
    get [_markerSize]() {
      let t6;
      return dart.test(this[__TooltipRenderBox__markerSize_isSet]) ? (t6 = this[__TooltipRenderBox__markerSize], t6) : dart.throw(new _internal.LateError.fieldNI("_markerSize"));
    }
    set [_markerSize](t6) {
      if (t6 == null) dart.nullFailed(I[0], 363, 15, "null");
      this[__TooltipRenderBox__markerSize_isSet] = true;
      this[__TooltipRenderBox__markerSize] = t6;
    }
    get markerSize() {
      return this[_markerSize];
    }
    set canResetPath(value) {
      if (value == null) dart.nullFailed(I[0], 371, 25, "value");
      if (this[_canResetPath] == value) {
        return;
      }
      this[_canResetPath] = value;
    }
    set boundaryRect(value) {
      if (value == null) dart.nullFailed(I[0], 381, 25, "value");
      if (dart.equals(this[_boundaryRect], value)) {
        return;
      }
      this[_boundaryRect] = value;
    }
    set markerTypes(types) {
      if (types == null) dart.nullFailed(I[0], 391, 41, "types");
      this[_markerTypes] = types;
    }
    set markerPaints(paints) {
      if (paints == null) dart.nullFailed(I[0], 398, 33, "paints");
      this[_markerPaints] = paints;
    }
    set markerImages(images) {
      if (images == null) dart.nullFailed(I[0], 405, 34, "images");
      this[_markerImages] = images;
    }
    set markerGradients(values) {
      if (values == null) dart.nullFailed(I[0], 412, 45, "values");
      this[_markerGradients] = values;
    }
    get [_markerPointY]() {
      let t7;
      return dart.test(this[__TooltipRenderBox__markerPointY_isSet]) ? (t7 = this[__TooltipRenderBox__markerPointY], t7) : dart.throw(new _internal.LateError.fieldNI("_markerPointY"));
    }
    set [_markerPointY](t7) {
      if (t7 == null) dart.nullFailed(I[0], 423, 15, "null");
      this[__TooltipRenderBox__markerPointY_isSet] = true;
      this[__TooltipRenderBox__markerPointY] = t7;
    }
    set [_templateSize](t8) {
      if (t8 == null) dart.nullFailed(I[0], 426, 13, "null");
      this[__TooltipRenderBox__templateSize_isSet] = true;
      this[__TooltipRenderBox__templateSize] = t8;
    }
    get [_templateSize]() {
      let t9;
      return dart.test(this[__TooltipRenderBox__templateSize_isSet]) ? (t9 = this[__TooltipRenderBox__templateSize], t9) : dart.throw(new _internal.LateError.fieldNI("_templateSize"));
    }
    hitTest(result, opts) {
      if (result == null) dart.nullFailed(I[0], 429, 33, "result");
      let position = opts && 'position' in opts ? opts.position : null;
      if (position == null) dart.nullFailed(I[0], 429, 58, "position");
      if (this.child == null || this[_tooltipRect] == null) {
        return false;
      } else {
        return dart.nullCheck(this.child).hitTest(result, {position: position['-'](dart.nullCheck(this[_tooltipRect]).topLeft)});
      }
    }
    performLayout() {
      let t9;
      if (dart.test(this[_tooltipState$][_show])) {
        if (this.child != null) {
          this[_isOutOfBoundInTop] = false;
          this.size = new ui.Size.copy(this[_boundaryRect].size);
          dart.nullCheck(this.child).layout(this.constraints, {parentUsesSize: true});
          this.size = new ui.Size.copy(dart.nullCheck(this.child).size);
        }
      } else {
        this.size = ui.Size.zero;
        t9 = this.child;
        t9 == null ? null : t9.layout(this.constraints);
      }
    }
    paint(context, offset) {
      if (context == null) dart.nullFailed(I[0], 453, 30, "context");
      if (offset == null) dart.nullFailed(I[0], 453, 46, "offset");
      this[_isOutOfBoundInTop] = false;
      context.canvas.translate(offset.dx, offset.dy);
      if (dart.test(this[_tooltipState$][_show])) {
        if ((this[_animationFactor] === 0 || this[_tooltip].animationDuration === 0) && this[_tooltipState$].widget.onTooltipRender != null) {
          let tooltipRenderArgs = new core$.TooltipRenderArgs.new(this[_header], this[_stringValue], this[_x] != null && this[_y] != null ? new ui.Offset.new(dart.nullCheck(this[_x]), dart.nullCheck(this[_y])) : null);
          dart.nullCheck(this[_tooltipState$].widget.onTooltipRender)(tooltipRenderArgs);
          this[_x] = dart.nullCheck(tooltipRenderArgs.location).dx;
          this[_y] = dart.nullCheck(tooltipRenderArgs.location).dy;
          this.stringValue = tooltipRenderArgs.text;
          this.header = tooltipRenderArgs.header;
        }
        if (this[_tooltip].builder == null) {
          this[_renderDefaultTooltipView](context.canvas);
        } else {
          this[_renderTemplateTooltipView](context, offset);
        }
      }
      context.canvas.translate(-dart.notNull(offset.dx), -dart.notNull(offset.dy));
    }
    [_renderTemplateTooltipView](context, offset) {
      if (context == null) dart.nullFailed(I[0], 476, 51, "context");
      if (offset == null) dart.nullFailed(I[0], 476, 67, "offset");
      this[_templateSize] = new ui.Size.copy(dart.nullCheck(this.child).size);
      this[_tooltipRect] = new ui.Rect.fromLTWH(dart.nullCheck(this[_x]) - dart.notNull(this[_templateSize].width) / 2, dart.nullCheck(this[_y]) - dart.notNull(this[_templateSize].height) - 5, this[_templateSize].width, this[_templateSize].height);
      let top = dart.nullCheck(this[_y]);
      let paddingTop = 0.0;
      let tooltipLocation = this[_getTemplateLocation](dart.nullCheck(this[_tooltipRect]), this[_boundaryRect]);
      let arrowLocation = new ui.Offset.new(dart.nullCheck(this[_x]) - dart.notNull(this[_templateSize].width) / 2, dart.test(this[_isOutOfBoundInTop]) ? dart.nullCheck(this[_y]) : dart.nullCheck(this[_y]) - 5);
      if (dart.nullCheck(this[_y]) < dart.notNull(this[_boundaryRect].top)) {
        paddingTop = dart.notNull(this[_boundaryRect].top) + 5;
        top = tooltipLocation.dy;
      }
      top = dart.test(this[_isOutOfBoundInTop]) ? dart.notNull(top) + 5 : dart.nullCheck(this[_tooltipRect]).top;
      if (dart.nullCheck(this[_y]) >= dart.notNull(this[_boundaryRect].top)) {
        paddingTop = top;
      }
      context.pushTransform(true, new ui.Offset.new(dart.nullCheck(this[_x]), dart.nullCheck(this[_y]))['+'](offset), vector_math_64.Matrix4.diagonal3Values(this[_animationFactor], this[_animationFactor], 1.0), dart.fn((tooltipTemplateContext, tooltipTemplateOffset) => {
        if (tooltipTemplateContext == null) dart.nullFailed(I[0], 501, 26, "tooltipTemplateContext");
        if (tooltipTemplateOffset == null) dart.nullFailed(I[0], 501, 57, "tooltipTemplateOffset");
        tooltipTemplateContext.paintChild(dart.nullCheck(this.child), (dart.test(this[_isOutOfBoundInTop]) ? new ui.Offset.new(tooltipLocation.dx, dart.notNull(tooltipLocation.dy) + dart.notNull(paddingTop)) : tooltipLocation)['+'](offset));
        this[_renderArrow](tooltipTemplateContext.canvas, arrowLocation['+'](offset));
      }, T.PaintingContextAndOffsetTovoid()));
    }
    [_renderArrow](canvas, location) {
      let t9, t9$;
      if (canvas == null) dart.nullFailed(I[0], 512, 28, "canvas");
      if (location == null) dart.nullFailed(I[0], 512, 43, "location");
      let currentSize = new ui.Size.new(this[_templateSize].width, 5);
      let templateHeight = this[_templateSize].height;
      let arrowHeight = dart.notNull(currentSize.height) + 2;
      let centerTemplateY = dart.test(this[_isOutOfBoundInTop]) ? dart.notNull(location.dy) + dart.notNull(currentSize.height) + dart.notNull(templateHeight) / 2 + 2 : dart.notNull(location.dy) - dart.notNull(templateHeight) / 2 - 2;
      let locationY = dart.test(this[_isOutOfBoundInTop]) ? centerTemplateY - dart.notNull(templateHeight) / 2 - arrowHeight : centerTemplateY + dart.notNull(templateHeight) / 2;
      let centerX = dart.notNull(location.dx) + dart.notNull(currentSize.width) / 2;
      this[_arrowPath] = (t9 = ui.Path.new(), (() => {
        t9.moveTo(centerX + (dart.test(this[_isOutOfBoundInTop]) ? 0.0 : -8), locationY);
        t9.lineTo(centerX + (dart.test(this[_isOutOfBoundInTop]) ? -8 : 8), locationY + (dart.test(this[_isOutOfBoundInTop]) ? arrowHeight : 0));
        t9.lineTo(centerX + (dart.test(this[_isOutOfBoundInTop]) ? 8 : 0.0), locationY + arrowHeight);
        t9.close();
        return t9;
      })());
      canvas.drawPath(this[_arrowPath], (t9$ = ui.Paint.new(), (() => {
        t9$.color = this[_tooltip].color.withOpacity(this[_tooltip].opacity);
        t9$.style = ui.PaintingStyle.fill;
        return t9$;
      })()));
    }
    calculateLocation(position) {
      let t9, t9$;
      this[_x] = (t9 = position, t9 == null ? null : t9.dx);
      this[_y] = (t9$ = position, t9$ == null ? null : t9$.dy);
    }
    [_renderDefaultTooltipView](canvas) {
      let t9, t9$;
      if (canvas == null) dart.nullFailed(I[0], 546, 41, "canvas");
      this[_isLeft] = false;
      this[_isRight] = false;
      let height = 0.0;
      let width = 0.0;
      let headerTextWidth = 0.0;
      let headerTextHeight = 0.0;
      this[_markerSize] = 0.0;
      this[_totalWidth] = this[_boundaryRect].left[$toDouble]() + this[_boundaryRect].width[$toDouble]();
      let _textStyle = this[_tooltip].textStyle;
      let textStyle = _textStyle.copyWith({color: (t9 = _textStyle.color, t9 == null ? this[_tooltip].labelColor : t9)});
      width = core$.measureText(dart.nullCheck(this[_stringValue]), textStyle).width;
      height = core$.measureText(dart.nullCheck(this[_stringValue]), textStyle).height;
      if (dart.nullCheck(this[_header])[$isNotEmpty]) {
        let headerTextStyle = _textStyle.copyWith({color: (t9$ = _textStyle.color, t9$ == null ? this[_tooltip].labelColor : t9$), fontWeight: ui.FontWeight.bold});
        headerTextWidth = core$.measureText(dart.nullCheck(this[_header]), headerTextStyle).width;
        headerTextHeight = dart.notNull(core$.measureText(dart.nullCheck(this[_header]), headerTextStyle).height) + 10;
        width = dart.notNull(width) > dart.notNull(headerTextWidth) ? width : headerTextWidth;
      }
      if (dart.notNull(width) < 10) {
        width = 10.0;
        this[_borderRadius] = dart.notNull(this[_borderRadius]) > 5 ? 5.0 : this[_borderRadius];
      }
      if (dart.notNull(this[_borderRadius]) > 15) {
        this[_borderRadius] = 15.0;
      }
      if (this[_x] != null && this[_y] != null && (this[_inversePadding] != null || this[_normalPadding] != null) && (this[_stringValue] !== "" || this[_header] !== "")) {
        let backRect = this[_calculateBackgroundRect](canvas, height, width, headerTextHeight);
        let startArrow = dart.notNull(this[_pointerLength]) / 2;
        let endArrow = dart.notNull(this[_pointerLength]) / 2;
        let xPosition = this[_nosePointX];
        let yPosition = this[_nosePointY];
        this[_drawTooltipBackground](canvas, this[_isTop], backRect, xPosition, yPosition, dart.notNull(xPosition) - startArrow, dart.test(this[_isTop]) ? dart.notNull(yPosition) - startArrow : dart.notNull(yPosition) + startArrow, dart.notNull(xPosition) + endArrow, dart.test(this[_isTop]) ? dart.notNull(yPosition) - endArrow : dart.notNull(yPosition) + endArrow, this[_borderRadius], this[_arrowPath], this[_isLeft], this[_isRight], this[_tooltipAnimation]);
      }
    }
    [_calculateBackgroundRect](canvas, height, width, headerTextHeight) {
      let t9, t9$, t9$0, t9$1;
      if (canvas == null) dart.nullFailed(I[0], 605, 14, "canvas");
      if (height == null) dart.nullFailed(I[0], 605, 29, "height");
      if (width == null) dart.nullFailed(I[0], 605, 44, "width");
      if (headerTextHeight == null) dart.nullFailed(I[0], 605, 58, "headerTextHeight");
      let widthPadding = 15.0;
      if (dart.test(this[_tooltip].canShowMarker) && dart.test(this[_tooltipState$].needMarker)) {
        this[_markerSize] = 5.0;
        widthPadding = 17.0;
      }
      let rect = new ui.Rect.fromLTWH(dart.nullCheck(this[_x]), dart.nullCheck(this[_y]), dart.notNull(width) + 2 * dart.notNull(this[_markerSize]) + widthPadding, dart.notNull(height) + dart.notNull(headerTextHeight) + 10);
      let newRect = new ui.Rect.fromLTWH(dart.notNull(this[_boundaryRect].left) + 20, this[_boundaryRect].top, dart.notNull(this[_boundaryRect].width) - 40, this[_boundaryRect].height);
      let leftRect = new ui.Rect.fromLTWH(dart.notNull(this[_boundaryRect].left) - 5, dart.notNull(this[_boundaryRect].top) - 20, dart.notNull(newRect.left) - (dart.notNull(this[_boundaryRect].left) - 5), dart.notNull(this[_boundaryRect].height) + 40);
      let rightRect = new ui.Rect.fromLTWH(newRect.right, dart.notNull(this[_boundaryRect].top) - 20, dart.notNull(this[_boundaryRect].right) + 5 + dart.notNull(newRect.right), dart.notNull(this[_boundaryRect].height) + 40);
      if (dart.test(leftRect.contains(new ui.Offset.new(dart.nullCheck(this[_x]), dart.nullCheck(this[_y]))))) {
        this[_isLeft] = true;
        this[_isRight] = false;
      } else if (dart.test(rightRect.contains(new ui.Offset.new(dart.nullCheck(this[_x]), dart.nullCheck(this[_y]))))) {
        this[_isLeft] = false;
        this[_isRight] = true;
      }
      if (dart.nullCheck(this[_y]) > dart.notNull(this[_pointerLength]) + dart.notNull(rect.height) && dart.nullCheck(this[_y]) > dart.notNull(this[_boundaryRect].top)) {
        this[_isTop] = true;
        this[_xPos] = dart.nullCheck(this[_x]) - dart.notNull(rect.width) / 2;
        this[_yPos] = dart.nullCheck(this[_y]) - dart.notNull(rect.height) - dart.notNull((t9 = this[_normalPadding], t9 == null ? 0 : t9));
        this[_nosePointY] = dart.notNull(rect.top) - dart.notNull((t9$ = this[_normalPadding], t9$ == null ? 0 : t9$));
        this[_nosePointX] = rect.left;
        let tooltipRightEnd = dart.nullCheck(this[_x]) + dart.notNull(rect.width) / 2;
        this[_xPos] = dart.nullCheck(this[_xPos]) < dart.notNull(this[_boundaryRect].left) ? this[_boundaryRect].left : tooltipRightEnd > dart.notNull(this[_totalWidth]) ? dart.notNull(this[_totalWidth]) - dart.notNull(rect.width) : this[_xPos];
        this[_yPos] = dart.nullCheck(this[_yPos]) - dart.notNull(this[_pointerLength]) / 2;
      } else {
        this[_isTop] = false;
        this[_xPos] = dart.nullCheck(this[_x]) - dart.notNull(rect.width) / 2;
        this[_yPos] = dart.notNull(dart.nullCheck(this[_y]) >= dart.notNull(this[_boundaryRect].top) ? dart.nullCheck(this[_y]) : this[_boundaryRect].top) + dart.notNull(this[_pointerLength]) / 2 + dart.notNull((t9$0 = this[_inversePadding], t9$0 == null ? 0 : t9$0));
        this[_nosePointX] = rect.left;
        this[_nosePointY] = dart.notNull(dart.nullCheck(this[_y]) >= dart.notNull(this[_boundaryRect].top) ? dart.nullCheck(this[_y]) : this[_boundaryRect].top) + dart.notNull((t9$1 = this[_inversePadding], t9$1 == null ? 0 : t9$1));
        let tooltipRightEnd = dart.nullCheck(this[_x]) + dart.notNull(rect.width) / 2;
        this[_xPos] = dart.nullCheck(this[_xPos]) < dart.notNull(this[_boundaryRect].left) ? this[_boundaryRect].left : tooltipRightEnd > dart.notNull(this[_totalWidth]) ? dart.notNull(this[_totalWidth]) - dart.notNull(rect.width) : this[_xPos];
      }
      if (dart.nullCheck(this[_xPos]) <= dart.notNull(this[_boundaryRect].left) + 5) {
        this[_xPos] = dart.nullCheck(this[_xPos]) + 5;
      } else if (dart.nullCheck(this[_xPos]) + dart.notNull(rect.width) >= dart.notNull(this[_totalWidth]) - 5) {
        this[_xPos] = dart.nullCheck(this[_xPos]) - 5;
      }
      return new ui.Rect.fromLTWH(dart.nullCheck(this[_xPos]), dart.nullCheck(this[_yPos]), rect.width, rect.height);
    }
    [_drawTooltipBackground](canvas, isTop, rectF, xPosition, yPosition, startX, startY, endX, endY, borderRadius, backgroundPath, isLeft, isRight, tooltipAnimation) {
      let t9, t9$, t9$0;
      if (canvas == null) dart.nullFailed(I[0], 673, 14, "canvas");
      if (isTop == null) dart.nullFailed(I[0], 674, 12, "isTop");
      if (rectF == null) dart.nullFailed(I[0], 675, 12, "rectF");
      if (xPosition == null) dart.nullFailed(I[0], 676, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 677, 14, "yPosition");
      if (startX == null) dart.nullFailed(I[0], 678, 14, "startX");
      if (startY == null) dart.nullFailed(I[0], 679, 14, "startY");
      if (endX == null) dart.nullFailed(I[0], 680, 14, "endX");
      if (endY == null) dart.nullFailed(I[0], 681, 14, "endY");
      if (borderRadius == null) dart.nullFailed(I[0], 682, 14, "borderRadius");
      if (backgroundPath == null) dart.nullFailed(I[0], 683, 12, "backgroundPath");
      if (isLeft == null) dart.nullFailed(I[0], 684, 12, "isLeft");
      if (isRight == null) dart.nullFailed(I[0], 685, 12, "isRight");
      let animationFactor = tooltipAnimation == null ? 1.0 : tooltipAnimation.value;
      backgroundPath.reset();
      if (!dart.test(this[_canResetPath])) {
        if (dart.test(isLeft)) {
          startX = dart.notNull(rectF.left) + 2 * dart.notNull(borderRadius);
          endX = dart.notNull(startX) + dart.notNull(this[_pointerLength]);
        } else if (dart.test(isRight)) {
          startX = dart.notNull(endX) - dart.notNull(this[_pointerLength]);
          endX = dart.notNull(rectF.right) - 2 * dart.notNull(borderRadius);
        }
        let rect = new ui.Rect.fromLTWH(dart.notNull(rectF.width) / 2 + (dart.notNull(rectF.left) - dart.notNull(rectF.width) / 2 * dart.notNull(animationFactor)), dart.notNull(rectF.height) / 2 + (dart.notNull(rectF.top) - dart.notNull(rectF.height) / 2 * dart.notNull(animationFactor)), dart.notNull(rectF.width) * dart.notNull(animationFactor), dart.notNull(rectF.height) * dart.notNull(animationFactor));
        this[_tooltipRect] = rect;
        let tooltipRect = new ui.RRect.fromRectAndCorners(rect, {bottomLeft: new ui.Radius.circular(borderRadius), bottomRight: new ui.Radius.circular(borderRadius), topLeft: new ui.Radius.circular(borderRadius), topRight: new ui.Radius.circular(borderRadius)});
        this[_drawTooltipPath](canvas, tooltipRect, rect, backgroundPath, isTop, isLeft, isRight, startX, endX, animationFactor, xPosition, yPosition);
        let textStyle = this[_tooltip].textStyle.copyWith({color: (t9$ = (t9 = this[_tooltip].textStyle.color, t9 == null ? null : t9.withOpacity(this[_tooltip].opacity)), t9$ == null ? this[_tooltip].labelColor : t9$), fontSize: dart.notNull((t9$0 = this[_tooltip].textStyle.fontSize, t9$0 == null ? 12.0 : t9$0)) * dart.notNull(animationFactor)});
        let result = core$.measureText(dart.nullCheck(this[_stringValue]), textStyle);
        this[_drawTooltipText](canvas, tooltipRect, textStyle, result, animationFactor);
        if (dart.test(this[_tooltip].canShowMarker) && dart.test(this[_tooltipState$].needMarker) && dart.test(this[_markerTypes][$isNotEmpty])) {
          if (this[_markerTypes][$length] === 1) {
            let markerPoint = new ui.Offset.new(dart.notNull(tooltipRect.left) + dart.notNull(tooltipRect.width) / 2 - dart.notNull(result.width) / 2, dart.notNull(tooltipRect.top) + dart.notNull(tooltipRect.height) - dart.notNull(result.height) / 2 - dart.notNull(this.markerSize));
            this[_drawMarkers](markerPoint, canvas, animationFactor, 0);
          } else {
            let height = 0.0;
            let textSize = C[20] || CT.C20;
            let textValues = dart.nullCheck(this[_stringValue])[$split]("\n");
            for (let i = 0; i < dart.notNull(this[_markerTypes][$length]) && i < dart.notNull(textValues[$length]); i = i + 1) {
              let str = "";
              str = str + dart.notNull(textValues[$_get](i));
              let result1 = core$.measureText(str, textStyle);
              let markerPoint = new ui.Offset.new(dart.notNull(tooltipRect.left) + dart.notNull(tooltipRect.width) / 2 - dart.notNull(result.width) / 2, dart.notNull(this[_markerPointY]) + height - dart.notNull(this.markerSize));
              textSize = result1;
              height = height + dart.notNull(textSize.height);
              if (this[_markerTypes][$_get](i) != null) {
                this[_drawMarkers](markerPoint, canvas, animationFactor, i);
              }
            }
          }
        }
      }
      this[_xPos] = null;
      this[_yPos] = null;
    }
    [_drawMarkers](markerPoint, canvas, animationFactor, i) {
      let t9;
      if (markerPoint == null) dart.nullFailed(I[0], 761, 14, "markerPoint");
      if (canvas == null) dart.nullFailed(I[0], 761, 34, "canvas");
      if (animationFactor == null) dart.nullFailed(I[0], 761, 49, "animationFactor");
      if (i == null) dart.nullFailed(I[0], 761, 70, "i");
      if (this[_markerImages][$_get](i) == null) {
        let markerPath = tooltip_internal._getMarkerShapesPath(dart.nullCheck(this[_markerTypes][$_get](i)), markerPoint, this[_markerImages][$_get](i), new ui.Size.new(2 * dart.notNull(this[_markerSize]) * dart.notNull(animationFactor), 2 * dart.notNull(this[_markerSize]) * dart.notNull(animationFactor)));
        if (dart.nullCheck(this[_markerGradients])[$_get](i) != null) {
          this[_markerPaints][$_set](i, (t9 = ui.Paint.new(), (() => {
            t9.shader = dart.nullCheck(dart.nullCheck(this[_markerGradients])[$_get](i)).createShader(tooltip_internal._getMarkerShapesPath(dart.nullCheck(this[_markerTypes][$_get](i)), new ui.Offset.new(markerPoint.dx, markerPoint.dy), this[_markerImages][$_get](i), new ui.Size.new(2 * dart.notNull(this[_markerSize]) * dart.notNull(animationFactor), 2 * dart.notNull(this[_markerSize]) * dart.notNull(animationFactor))).getBounds());
            t9.style = ui.PaintingStyle.fill;
            return t9;
          })()));
        }
        canvas.drawPath(markerPath, dart.nullCheck(this[_markerPaints][$_get](i)));
        let markerBorderPaint = ui.Paint.new();
        markerBorderPaint.color = colors.Colors.white.withOpacity(this[_tooltip].opacity);
        markerBorderPaint.strokeWidth = 1.0;
        markerBorderPaint.style = ui.PaintingStyle.stroke;
        canvas.drawPath(markerPath, markerBorderPaint);
      } else {
        this[_markerSize] = dart.notNull(this[_markerSize]) * (2 * dart.notNull(animationFactor));
        let positionRect = new ui.Rect.fromLTWH(dart.notNull(markerPoint.dx) - dart.notNull(this[_markerSize]) / 2, dart.notNull(markerPoint.dy) - dart.notNull(this[_markerSize]) / 2, this[_markerSize], this[_markerSize]);
        decoration_image.paintImage({canvas: canvas, image: ui.Image.as(this[_markerImages][$_get](i)), rect: positionRect, fit: box_fit.BoxFit.fill});
      }
    }
    [_drawTooltipPath](canvas, tooltipRect, rect, backgroundPath, isTop, isLeft, isRight, startX, endX, animationFactor, xPosition, yPosition) {
      let t9, t9$, t9$0, t9$1;
      if (canvas == null) dart.nullFailed(I[0], 805, 14, "canvas");
      if (tooltipRect == null) dart.nullFailed(I[0], 806, 13, "tooltipRect");
      if (rect == null) dart.nullFailed(I[0], 807, 12, "rect");
      if (backgroundPath == null) dart.nullFailed(I[0], 808, 12, "backgroundPath");
      if (isTop == null) dart.nullFailed(I[0], 809, 12, "isTop");
      if (isLeft == null) dart.nullFailed(I[0], 810, 12, "isLeft");
      if (isRight == null) dart.nullFailed(I[0], 811, 12, "isRight");
      if (startX == null) dart.nullFailed(I[0], 812, 14, "startX");
      if (endX == null) dart.nullFailed(I[0], 813, 14, "endX");
      if (animationFactor == null) dart.nullFailed(I[0], 814, 14, "animationFactor");
      if (xPosition == null) dart.nullFailed(I[0], 815, 14, "xPosition");
      if (yPosition == null) dart.nullFailed(I[0], 816, 14, "yPosition");
      let factor = 0.0;
      if (!(dart.notNull(this[_tooltip].elevation) >= 0)) dart.assertFailed("The elevation of the tooltip for all series must not be less than 0.", I[0], 818, 12, "_tooltip.elevation >= 0");
      if (dart.test(isRight)) {
        factor = dart.test(isTop) ? rect.bottom : rect.top;
        backgroundPath.moveTo(dart.notNull(rect.right) - 20, factor);
        backgroundPath.lineTo(xPosition, yPosition);
        backgroundPath.lineTo(rect.right, dart.test(isTop) ? dart.notNull(factor) - dart.notNull(this[_borderRadius]) : dart.notNull(factor) + dart.notNull(this[_borderRadius]));
        backgroundPath.arcToPoint(new ui.Offset.new(dart.notNull(rect.right) - dart.notNull(this[_borderRadius]), factor), {radius: new ui.Radius.circular(this[_borderRadius]), clockwise: isTop});
        backgroundPath.lineTo(dart.notNull(rect.right) - 20, factor);
      } else if (dart.test(isLeft)) {
        factor = dart.test(isTop) ? rect.bottom : rect.top;
        backgroundPath.moveTo(dart.notNull(rect.left) + 20, factor);
        backgroundPath.lineTo(xPosition, yPosition);
        backgroundPath.lineTo(rect.left, dart.test(isTop) ? dart.notNull(factor) - dart.notNull(this[_borderRadius]) : dart.notNull(factor) + dart.notNull(this[_borderRadius]));
        backgroundPath.arcToPoint(new ui.Offset.new(dart.notNull(rect.left) + dart.notNull(this[_borderRadius]), factor), {radius: new ui.Radius.circular(this[_borderRadius]), clockwise: !dart.test(isTop)});
        backgroundPath.lineTo(dart.notNull(rect.left) + 20, factor);
      } else {
        factor = dart.test(isTop) ? tooltipRect.bottom : tooltipRect.top;
        backgroundPath.moveTo(dart.notNull(startX) - (dart.notNull(endX) - dart.notNull(startX)) / 4, factor);
        backgroundPath.lineTo(xPosition, yPosition);
        backgroundPath.lineTo(dart.notNull(endX) + (dart.notNull(endX) - dart.notNull(startX)) / 4, factor);
        backgroundPath.lineTo(dart.notNull(startX) + (dart.notNull(endX) - dart.notNull(startX)) / 4, factor);
      }
      let fillPaint = (t9 = ui.Paint.new(), (() => {
        t9.color = this[_tooltip].color.withOpacity(this[_tooltip].opacity);
        t9.strokeCap = ui.StrokeCap.round;
        t9.style = ui.PaintingStyle.fill;
        return t9;
      })());
      let strokePaint = (t9$ = ui.Paint.new(), (() => {
        t9$.color = dart.equals(this[_tooltip].borderColor, colors.Colors.transparent) ? colors.Colors.transparent : this[_tooltip].borderColor.withOpacity(this[_tooltip].opacity);
        t9$.strokeCap = ui.StrokeCap.butt;
        t9$.style = ui.PaintingStyle.stroke;
        t9$.strokeWidth = this[_tooltip].borderWidth;
        return t9$;
      })());
      this[_tooltip].borderWidth === 0 ? strokePaint.color = colors.Colors.transparent : strokePaint.color = strokePaint.color;
      let tooltipPath = ui.Path.new();
      tooltipPath.addRRect(tooltipRect);
      if (dart.notNull(this[_tooltip].elevation) > 0) {
        if (dart.notNull(tooltipRect.width) * dart.notNull(animationFactor) > dart.notNull(tooltipRect.width) * 0.85) {
          canvas.drawShadow(this[_arrowPath], (t9$0 = this[_tooltip].shadowColor, t9$0 == null ? fillPaint.color : t9$0), this[_tooltip].elevation, true);
        }
        canvas.drawShadow(tooltipPath, (t9$1 = this[_tooltip].shadowColor, t9$1 == null ? fillPaint.color : t9$1), this[_tooltip].elevation, true);
      }
      if (dart.notNull(tooltipRect.width) * dart.notNull(animationFactor) > dart.notNull(tooltipRect.width) * 0.85) {
        canvas.drawPath(this[_arrowPath], fillPaint);
        canvas.drawPath(this[_arrowPath], strokePaint);
      }
      canvas.drawPath(tooltipPath, fillPaint);
      canvas.drawPath(tooltipPath, strokePaint);
    }
    [_drawTooltipText](canvas, tooltipRect, textStyle, result, animationFactor) {
      let t9, t9$, t9$0;
      if (canvas == null) dart.nullFailed(I[0], 881, 32, "canvas");
      if (tooltipRect == null) dart.nullFailed(I[0], 881, 46, "tooltipRect");
      if (textStyle == null) dart.nullFailed(I[0], 881, 69, "textStyle");
      if (result == null) dart.nullFailed(I[0], 882, 12, "result");
      if (animationFactor == null) dart.nullFailed(I[0], 882, 27, "animationFactor");
      let markerPadding = 0;
      for (let i = 0; i < dart.nullCheck(this[_stringValue]).length; i = i + 1) {
        if (dart.test(this[_tooltip].canShowMarker) && dart.test(this[_tooltip].shared) && dart.test(this[_tooltipState$][_shared])) {
          markerPadding = 10 - dart.notNull(this.markerSize) + 5;
        }
      }
      let _maxLinesOfTooltipContent = core$.getMaxLinesContent(this[_stringValue]);
      if (dart.nullCheck(this[_header])[$isNotEmpty]) {
        let headerTextStyle = this[_tooltip].textStyle.copyWith({color: (t9$ = (t9 = textStyle.color, t9 == null ? null : t9.withOpacity(this[_tooltip].opacity)), t9$ == null ? this[_tooltip].labelColor : t9$), fontSize: dart.notNull((t9$0 = textStyle.fontSize, t9$0 == null ? 12.0 : t9$0)) * dart.notNull(animationFactor), fontWeight: ui.FontWeight.bold});
        let headerResult = core$.measureText(dart.nullCheck(this[_header]), headerTextStyle);
        this[_markerPointY] = dart.notNull(tooltipRect.top) + (dart.nullCheck(this[_header])[$isNotEmpty] ? dart.notNull(headerResult.height) + 10 * 2 + 6 : 10 * 1.7);
        let maxLinesOfHeader = core$.getMaxLinesContent(this[_header]);
        this[_drawText](this[_tooltip], canvas, dart.nullCheck(this[_header]), new ui.Offset.new(markerPadding + dart.notNull(tooltipRect.left) + dart.notNull(tooltipRect.width) / 2 - dart.notNull(headerResult.width) / 2, dart.notNull(tooltipRect.top) + 10 / 2), headerTextStyle, maxLinesOfHeader);
        let dividerPaint = ui.Paint.new();
        dividerPaint.color = this[_tooltip].labelColor.withOpacity(this[_tooltip].opacity);
        dividerPaint.strokeWidth = 0.5 * dart.notNull(animationFactor);
        dividerPaint.style = ui.PaintingStyle.stroke;
        let lineOffset = 0;
        if (this[_tooltip].format != null && dart.nullCheck(this[_tooltip].format)[$isNotEmpty]) {
          if (dart.equals(this[_tooltip].textAlignment, core$.TooltipAlignment.near)) {
            lineOffset = 10;
          } else if (dart.equals(this[_tooltip].textAlignment, core$.TooltipAlignment.far)) {
            lineOffset = -10;
          }
        }
        if (dart.notNull(animationFactor) > 0.5) {
          canvas.drawLine(new ui.Offset.new(dart.notNull(tooltipRect.left) + 10 - lineOffset, dart.notNull(tooltipRect.top) + dart.notNull(headerResult.height) + 10), new ui.Offset.new(dart.notNull(tooltipRect.right) - 10 - lineOffset, dart.notNull(tooltipRect.top) + dart.notNull(headerResult.height) + 10), dividerPaint);
        }
        this[_drawText](this[_tooltip], canvas, dart.nullCheck(this[_stringValue]), new ui.Offset.new(dart.notNull(tooltipRect.left) + 2 * dart.notNull(this[_markerSize]) + dart.notNull(tooltipRect.width) / 2 - dart.notNull(result.width) / 2, dart.notNull(tooltipRect.top) + dart.notNull(tooltipRect.height) - dart.notNull(result.height) - 5), textStyle, _maxLinesOfTooltipContent);
      } else {
        this[_drawText](this[_tooltip], canvas, dart.nullCheck(this[_stringValue]), new ui.Offset.new(dart.notNull(tooltipRect.left) + 2 * dart.notNull(this[_markerSize]) + dart.notNull(tooltipRect.width) / 2 - dart.notNull(result.width) / 2, dart.notNull(tooltipRect.top) + dart.notNull(tooltipRect.height) / 2 - dart.notNull(result.height) / 2), textStyle, _maxLinesOfTooltipContent);
      }
    }
    [_drawText](tooltip, canvas, text, point, style, maxLines = null, rotation = null) {
      let t9;
      if (tooltip == null) dart.nullFailed(I[0], 960, 28, "tooltip");
      if (canvas == null) dart.nullFailed(I[0], 960, 44, "canvas");
      if (text == null) dart.nullFailed(I[0], 960, 59, "text");
      if (point == null) dart.nullFailed(I[0], 960, 72, "point");
      if (style == null) dart.nullFailed(I[0], 961, 17, "style");
      let tooltipTextAlign = ui.TextAlign.start;
      let pointX = point.dx;
      if (tooltip != null && tooltip.format != null && dart.nullCheck(tooltip.format)[$isNotEmpty]) {
        if (dart.equals(tooltip.textAlignment, "near")) {
          tooltipTextAlign = ui.TextAlign.start;
          pointX = dart.nullCheck(this[_tooltipRect]).left;
        } else if (dart.equals(tooltip.textAlignment, "far")) {
          tooltipTextAlign = ui.TextAlign.end;
          pointX = dart.notNull(dart.nullCheck(this[_tooltipRect]).right) - dart.notNull(core$.measureText(text, style).width);
        }
      }
      if (true) {
        if (dart.notNull(this[_animationFactor]) < 0.5) {
          style = style.copyWith({color: dart.nullCheck(style.color).withOpacity(this[_animationFactor])});
        } else if (dart.notNull(this[_animationFactor]) <= 1) {
          style = style.copyWith({color: dart.nullCheck(style.color).withOpacity(tooltip.opacity)});
        }
      }
      let span = new text_span.TextSpan.new({text: text, style: style});
      let tp = new text_painter.TextPainter.new({text: span, textDirection: ui.TextDirection.ltr, textAlign: tooltipTextAlign, maxLines: (t9 = maxLines, t9 == null ? 1 : t9)});
      tp.layout();
      canvas.save();
      canvas.translate(pointX, point.dy);
      if (rotation != null && dart.notNull(rotation) > 0) {
        canvas.rotate(core$.degreeToRadian(rotation));
      }
      tp.paint(canvas, C[21] || CT.C21);
      canvas.restore();
    }
    [_getTemplateLocation](tooltipRect, bounds) {
      if (tooltipRect == null) dart.nullFailed(I[0], 1004, 36, "tooltipRect");
      if (bounds == null) dart.nullFailed(I[0], 1004, 54, "bounds");
      let left = tooltipRect.left;
      let top = tooltipRect.top;
      if (dart.notNull(tooltipRect.left) < dart.notNull(bounds.left)) {
        left = bounds.left;
      }
      if (dart.notNull(tooltipRect.top) < dart.notNull(bounds.top)) {
        top = bounds.top;
        this[_isOutOfBoundInTop] = true;
      }
      if (dart.notNull(tooltipRect.left) + dart.notNull(tooltipRect.width) > dart.notNull(bounds.left) + dart.notNull(bounds.width)) {
        left = dart.notNull(bounds.left) + dart.notNull(bounds.width) - dart.notNull(tooltipRect.width);
      }
      if (dart.notNull(tooltipRect.top) + dart.notNull(tooltipRect.height) > dart.notNull(bounds.top) + dart.notNull(bounds.height)) {
        top = dart.notNull(bounds.top) + dart.notNull(bounds.height) - dart.notNull(tooltipRect.height);
      }
      return new ui.Offset.new(left, top);
    }
  };
  (tooltip_internal.TooltipRenderBox.new = function(_tooltipState, _tooltipAnimation, _animationController, child = null) {
    if (_tooltipState == null) dart.nullFailed(I[0], 279, 12, "_tooltipState");
    if (_tooltipAnimation == null) dart.nullFailed(I[0], 279, 32, "_tooltipAnimation");
    if (_animationController == null) dart.nullFailed(I[0], 279, 56, "_animationController");
    this[__TooltipRenderBox__tooltipAnimation] = null;
    this[__TooltipRenderBox__tooltipAnimation_isSet] = false;
    this[__TooltipRenderBox__animationController] = null;
    this[__TooltipRenderBox__animationController_isSet] = false;
    this[__TooltipRenderBox__animationFactor] = null;
    this[__TooltipRenderBox__animationFactor_isSet] = false;
    this[_stringValue] = "";
    this[_header] = "";
    this[_normalPadding] = 0.0;
    this[_inversePadding] = null;
    this[__TooltipRenderBox__markerSize] = null;
    this[__TooltipRenderBox__markerSize_isSet] = false;
    this[_canResetPath] = false;
    this[_boundaryRect] = C[19] || CT.C19;
    this[_markerTypes] = T.JSArrayOfDataMarkerTypeN().of([]);
    this[_markerPaints] = T.JSArrayOfPaintN().of([]);
    this[_markerImages] = [];
    this[_markerGradients] = null;
    this[_pointerLength] = 10.0;
    this[_xPos] = null;
    this[_yPos] = null;
    this[_x] = null;
    this[_y] = null;
    this[_nosePointX] = 0.0;
    this[_nosePointY] = 0.0;
    this[_borderRadius] = 5.0;
    this[_totalWidth] = 0.0;
    this[_isLeft] = false;
    this[_isRight] = false;
    this[_isTop] = false;
    this[_isOutOfBoundInTop] = false;
    this[__TooltipRenderBox__markerPointY] = null;
    this[__TooltipRenderBox__markerPointY_isSet] = false;
    this[_tooltipRect] = null;
    this[_arrowPath] = ui.Path.new();
    this[__TooltipRenderBox__templateSize] = null;
    this[__TooltipRenderBox__templateSize_isSet] = false;
    this[_tooltipState$] = _tooltipState;
    this[__TooltipRenderBox__tooltipAnimation_isSet] = true;
    this[__TooltipRenderBox__tooltipAnimation] = _tooltipAnimation;
    this[__TooltipRenderBox__animationController_isSet] = true;
    this[__TooltipRenderBox__animationController] = _animationController;
    tooltip_internal.TooltipRenderBox.__proto__.new.call(this, child);
    ;
  }).prototype = tooltip_internal.TooltipRenderBox.prototype;
  dart.addTypeTests(tooltip_internal.TooltipRenderBox);
  dart.addTypeCaches(tooltip_internal.TooltipRenderBox);
  dart.setMethodSignature(tooltip_internal.TooltipRenderBox, () => ({
    __proto__: dart.getMethods(tooltip_internal.TooltipRenderBox.__proto__),
    [_renderTemplateTooltipView]: dart.fnType(dart.void, [object.PaintingContext, ui.Offset]),
    [_renderArrow]: dart.fnType(dart.void, [ui.Canvas, ui.Offset]),
    calculateLocation: dart.fnType(dart.void, [dart.nullable(ui.Offset)]),
    [_renderDefaultTooltipView]: dart.fnType(dart.void, [ui.Canvas]),
    [_calculateBackgroundRect]: dart.fnType(ui.Rect, [ui.Canvas, core.double, core.double, core.double]),
    [_drawTooltipBackground]: dart.fnType(dart.void, [ui.Canvas, core.bool, ui.Rect, core.double, core.double, core.double, core.double, core.double, core.double, core.double, ui.Path, core.bool, core.bool, dart.nullable(animation.Animation$(core.double))]),
    [_drawMarkers]: dart.fnType(dart.void, [ui.Offset, ui.Canvas, core.double, core.int]),
    [_drawTooltipPath]: dart.fnType(dart.void, [ui.Canvas, ui.RRect, ui.Rect, ui.Path, core.bool, core.bool, core.bool, core.double, core.double, core.double, core.double, core.double]),
    [_drawTooltipText]: dart.fnType(dart.void, [ui.Canvas, ui.RRect, text_style.TextStyle, ui.Size, core.double]),
    [_drawText]: dart.fnType(dart.void, [tooltip_internal.SfTooltip, ui.Canvas, core.String, ui.Offset, text_style.TextStyle], [dart.nullable(core.int), dart.nullable(core.int)]),
    [_getTemplateLocation]: dart.fnType(ui.Offset, [ui.Rect, ui.Rect])
  }));
  dart.setGetterSignature(tooltip_internal.TooltipRenderBox, () => ({
    __proto__: dart.getGetters(tooltip_internal.TooltipRenderBox.__proto__),
    [_tooltip]: tooltip_internal.SfTooltip,
    [_tooltipAnimation]: animation.Animation$(core.double),
    [_animationController]: animation_controller.AnimationController,
    [_animationFactor]: core.double,
    [_markerSize]: core.double,
    markerSize: core.double,
    [_markerPointY]: core.double,
    [_templateSize]: ui.Size
  }));
  dart.setSetterSignature(tooltip_internal.TooltipRenderBox, () => ({
    __proto__: dart.getSetters(tooltip_internal.TooltipRenderBox.__proto__),
    tooltipState: tooltip_internal.SfTooltipState,
    [_tooltipAnimation]: animation.Animation$(core.double),
    tooltipAnimation: animation.Animation$(core.double),
    [_animationController]: animation_controller.AnimationController,
    animationController: animation_controller.AnimationController,
    [_animationFactor]: core.double,
    animationFactor: core.double,
    stringValue: dart.nullable(core.String),
    header: dart.nullable(core.String),
    normalPadding: core.double,
    inversePadding: core.double,
    [_markerSize]: core.double,
    canResetPath: core.bool,
    boundaryRect: ui.Rect,
    markerTypes: core.List$(dart.nullable(core$.DataMarkerType)),
    markerPaints: core.List$(dart.nullable(ui.Paint)),
    markerImages: core.List,
    markerGradients: core.List$(dart.nullable(gradient.LinearGradient)),
    [_markerPointY]: core.double,
    [_templateSize]: ui.Size
  }));
  dart.setLibraryUri(tooltip_internal.TooltipRenderBox, I[1]);
  dart.setFieldSignature(tooltip_internal.TooltipRenderBox, () => ({
    __proto__: dart.getFields(tooltip_internal.TooltipRenderBox.__proto__),
    [_tooltipState$]: dart.fieldType(tooltip_internal.SfTooltipState),
    [__TooltipRenderBox__tooltipAnimation]: dart.fieldType(dart.nullable(animation.Animation$(core.double))),
    [__TooltipRenderBox__tooltipAnimation_isSet]: dart.fieldType(core.bool),
    [__TooltipRenderBox__animationController]: dart.fieldType(dart.nullable(animation_controller.AnimationController)),
    [__TooltipRenderBox__animationController_isSet]: dart.fieldType(core.bool),
    [__TooltipRenderBox__animationFactor]: dart.fieldType(dart.nullable(core.double)),
    [__TooltipRenderBox__animationFactor_isSet]: dart.fieldType(core.bool),
    [_stringValue]: dart.fieldType(dart.nullable(core.String)),
    [_header]: dart.fieldType(dart.nullable(core.String)),
    [_normalPadding]: dart.fieldType(dart.nullable(core.double)),
    [_inversePadding]: dart.fieldType(dart.nullable(core.double)),
    [__TooltipRenderBox__markerSize]: dart.fieldType(dart.nullable(core.double)),
    [__TooltipRenderBox__markerSize_isSet]: dart.fieldType(core.bool),
    [_canResetPath]: dart.fieldType(core.bool),
    [_boundaryRect]: dart.fieldType(ui.Rect),
    [_markerTypes]: dart.fieldType(core.List$(dart.nullable(core$.DataMarkerType))),
    [_markerPaints]: dart.fieldType(core.List$(dart.nullable(ui.Paint))),
    [_markerImages]: dart.fieldType(core.List),
    [_markerGradients]: dart.fieldType(dart.nullable(core.List$(dart.nullable(gradient.LinearGradient)))),
    [_pointerLength]: dart.finalFieldType(core.double),
    [_xPos]: dart.fieldType(dart.nullable(core.double)),
    [_yPos]: dart.fieldType(dart.nullable(core.double)),
    [_x]: dart.fieldType(dart.nullable(core.double)),
    [_y]: dart.fieldType(dart.nullable(core.double)),
    [_nosePointX]: dart.fieldType(core.double),
    [_nosePointY]: dart.fieldType(core.double),
    [_borderRadius]: dart.fieldType(core.double),
    [_totalWidth]: dart.fieldType(core.double),
    [_isLeft]: dart.fieldType(core.bool),
    [_isRight]: dart.fieldType(core.bool),
    [_isTop]: dart.fieldType(core.bool),
    [_isOutOfBoundInTop]: dart.fieldType(core.bool),
    [__TooltipRenderBox__markerPointY]: dart.fieldType(dart.nullable(core.double)),
    [__TooltipRenderBox__markerPointY_isSet]: dart.fieldType(core.bool),
    [_tooltipRect]: dart.fieldType(dart.nullable(ui.Rect)),
    [_arrowPath]: dart.fieldType(ui.Path),
    [__TooltipRenderBox__templateSize]: dart.fieldType(dart.nullable(ui.Size)),
    [__TooltipRenderBox__templateSize_isSet]: dart.fieldType(core.bool)
  }));
  tooltip_internal._getMarkerShapesPath = function _getMarkerShapesPath(markerType, position, image, size) {
    if (markerType == null) dart.nullFailed(I[0], 1025, 20, "markerType");
    if (position == null) dart.nullFailed(I[0], 1025, 39, "position");
    if (size == null) dart.nullFailed(I[0], 1025, 69, "size");
    let path = ui.Path.new();
    switch (markerType) {
      case C[22] || CT.C22:
      {
        {
          core$.ShapeMaker.drawCircle(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[23] || CT.C23:
      {
        {
          core$.ShapeMaker.drawRectangle(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[24] || CT.C24:
      {
        {
        }
        break;
      }
      case C[25] || CT.C25:
      {
        {
          core$.ShapeMaker.drawPentagon(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[26] || CT.C26:
      {
        {
          core$.ShapeMaker.drawVerticalLine(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[27] || CT.C27:
      {
        {
          core$.ShapeMaker.drawInvertedTriangle(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[28] || CT.C28:
      {
        {
          core$.ShapeMaker.drawHorizontalLine(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[29] || CT.C29:
      {
        {
          core$.ShapeMaker.drawDiamond(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[30] || CT.C30:
      {
        {
          core$.ShapeMaker.drawTriangle(path, position.dx, position.dy, size.width, size.height);
        }
        break;
      }
      case C[31] || CT.C31:
      {
        break;
      }
      default:
      {
        dart.throw(new _internal.ReachabilityError.new("`null` encountered as case in a switch expression with a non-nullable enum type."));
      }
    }
    return path;
  };
  dart.trackLibraries("packages/syncfusion_flutter_core/tooltip_internal.dart", {
    "package:syncfusion_flutter_core/tooltip_internal.dart": tooltip_internal
  }, {
    "package:syncfusion_flutter_core/tooltip_internal.dart": ["src/tooltip/tooltip.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/tooltip/tooltip.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../G:/packages/syncfusion_flutter_core/tooltip_internal.dart.lib.js"}');
  // Exports:
  return {
    tooltip_internal: tooltip_internal
  };
}));

//# sourceMappingURL=tooltip_internal.dart.lib.js.map
