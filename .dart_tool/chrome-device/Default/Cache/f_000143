define(['dart_sdk', 'packages/flutter/src/painting/placeholder_span.dart', 'packages/vector_math/vector_math.dart'], (function load__packages__syncfusion_flutter_core__core_dart(dart_sdk, packages__flutter__src__painting__placeholder_span$46dart, packages__vector_math__vector_math$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const ui = dart_sdk.ui;
  const math = dart_sdk.math;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const text_painter = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_painter;
  const text_span = packages__flutter__src__painting__placeholder_span$46dart.src__painting__text_span;
  const vector_math = packages__vector_math__vector_math$46dart.vector_math;
  var core$ = Object.create(dart.library);
  var $toString = dartx.toString;
  var $length = dartx.length;
  var $_get = dartx._get;
  var $runtimeType = dartx.runtimeType;
  var $_equals = dartx._equals;
  var $contains = dartx.contains;
  var $add = dartx.add;
  var $modulo = dartx['%'];
  var $abs = dartx.abs;
  var $floor = dartx.floor;
  var $map = dartx.map;
  var $reduce = dartx.reduce;
  var $isNotEmpty = dartx.isNotEmpty;
  var $split = dartx.split;
  dart._checkModuleNullSafetyMode(false);
  var T = {
    TooltipAlignmentL: () => (T.TooltipAlignmentL = dart.constFn(dart.legacy(core$.TooltipAlignment)))(),
    DataMarkerTypeL: () => (T.DataMarkerTypeL = dart.constFn(dart.legacy(core$.DataMarkerType)))(),
    JSArrayOfHijriDateTime: () => (T.JSArrayOfHijriDateTime = dart.constFn(_interceptors.JSArray$(core$.HijriDateTime)))(),
    JSArrayOfDateTime: () => (T.JSArrayOfDateTime = dart.constFn(_interceptors.JSArray$(core.DateTime)))(),
    JSArrayOfOffset: () => (T.JSArrayOfOffset = dart.constFn(_interceptors.JSArray$(ui.Offset)))(),
    OffsetTodouble: () => (T.OffsetTodouble = dart.constFn(dart.fnType(core.double, [ui.Offset])))(),
    TAndTToT: () => (T.TAndTToT = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    TAndTToT$1: () => (T.TAndTToT$1 = dart.constFn(dart.gFnType(T => [T, [T, T]], T => [core.num])))(),
    intL: () => (T.intL = dart.constFn(dart.legacy(core.int)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.const({
        __proto__: core$.TooltipAlignment.prototype,
        [_name$]: "TooltipAlignment.near",
        index: 0
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: core$.TooltipAlignment.prototype,
        [_name$]: "TooltipAlignment.center",
        index: 1
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: core$.TooltipAlignment.prototype,
        [_name$]: "TooltipAlignment.far",
        index: 2
      });
    },
    get C3() {
      return C[3] = dart.constList([C[0] || CT.C0, C[1] || CT.C1, C[2] || CT.C2], T.TooltipAlignmentL());
    },
    get C4() {
      return C[4] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.circle",
        index: 0
      });
    },
    get C5() {
      return C[5] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.rectangle",
        index: 1
      });
    },
    get C6() {
      return C[6] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.image",
        index: 2
      });
    },
    get C7() {
      return C[7] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.pentagon",
        index: 3
      });
    },
    get C8() {
      return C[8] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.verticalLine",
        index: 4
      });
    },
    get C9() {
      return C[9] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.horizontalLine",
        index: 5
      });
    },
    get C10() {
      return C[10] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.diamond",
        index: 6
      });
    },
    get C11() {
      return C[11] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.triangle",
        index: 7
      });
    },
    get C12() {
      return C[12] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.invertedTriangle",
        index: 8
      });
    },
    get C13() {
      return C[13] = dart.const({
        __proto__: core$.DataMarkerType.prototype,
        [_name$]: "DataMarkerType.none",
        index: 9
      });
    },
    get C14() {
      return C[14] = dart.constList([C[4] || CT.C4, C[5] || CT.C5, C[6] || CT.C6, C[7] || CT.C7, C[8] || CT.C8, C[9] || CT.C9, C[10] || CT.C10, C[11] || CT.C11, C[12] || CT.C12, C[13] || CT.C13], T.DataMarkerTypeL());
    },
    get C15() {
      return C[15] = dart.fn(math.min, T.TAndTToT());
    },
    get C16() {
      return C[16] = dart.fn(math.max, T.TAndTToT$1());
    },
    get C17() {
      return C[17] = dart.constList([28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167, 29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759, 29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348, 30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939, 30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530, 31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120, 32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711, 32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302, 33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893, 33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483, 34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074, 35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665, 35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254, 36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845, 36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436, 37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027, 38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617, 38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208, 39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798, 39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389, 40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980, 41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570, 41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161, 42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751, 42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342, 43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932, 43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523, 44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114, 45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704, 45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295, 46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885, 46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476, 47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066, 48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657, 48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248, 49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838, 49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429, 50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019, 51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611, 51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200, 52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792, 52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383, 53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973, 54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564, 54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154, 55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745, 55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335, 56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926, 56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517, 57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107, 58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698, 58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288, 59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879, 59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469, 60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061, 61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651, 61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242, 62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832, 62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423, 63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014, 64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603, 64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195, 65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785, 65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376, 66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967, 66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557, 67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148, 68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738, 68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330, 69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919, 69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510, 70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101, 71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691, 71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282, 72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872, 72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464, 73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053, 74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645, 74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235, 75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826, 75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416, 76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007, 77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598, 77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188, 78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779, 78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369, 79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960, 79990], T.intL());
    }
  }, false);
  var C = Array(18).fill(void 0);
  var I = [
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/license.dart",
    "package:syncfusion_flutter_core/core.dart",
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/calendar/hijri_date_time.dart",
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/utils/helper.dart",
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/syncfusion_flutter_core-19.1.59/lib/src/calendar/calendar_helper.dart"
  ];
  core$.SyncfusionLicense = class SyncfusionLicense extends core.Object {
    static validateLicense(context) {
      if (context == null) dart.nullFailed(I[0], 12, 47, "context");
    }
    static registerLicense(licenseKey) {
      if (licenseKey == null) dart.nullFailed(I[0], 18, 38, "licenseKey");
    }
  };
  (core$.SyncfusionLicense.new = function() {
    ;
  }).prototype = core$.SyncfusionLicense.prototype;
  dart.addTypeTests(core$.SyncfusionLicense);
  dart.addTypeCaches(core$.SyncfusionLicense);
  dart.setLibraryUri(core$.SyncfusionLicense, I[1]);
  var year$ = dart.privateName(core$, "HijriDateTime.year");
  var month$ = dart.privateName(core$, "HijriDateTime.month");
  var day$ = dart.privateName(core$, "HijriDateTime.day");
  var _date = dart.privateName(core$, "_date");
  var _twoDigits = dart.privateName(core$, "_twoDigits");
  var _add = dart.privateName(core$, "_add");
  var _getPreviousDate = dart.privateName(core$, "_getPreviousDate");
  var _getNextDate = dart.privateName(core$, "_getNextDate");
  core$.HijriDateTime = class HijriDateTime extends core.Object {
    get year() {
      return this[year$];
    }
    set year(value) {
      super.year = value;
    }
    get month() {
      return this[month$];
    }
    set month(value) {
      super.month = value;
    }
    get day() {
      return this[day$];
    }
    set day(value) {
      super.day = value;
    }
    static now() {
      let today = new core.DateTime.now();
      return core$.convertToHijriDate(today);
    }
    static fromDateTime(date) {
      if (date == null) dart.nullFailed(I[2], 1786, 46, "date");
      return core$.convertToHijriDate(date);
    }
    toDateTime() {
      return this[_date];
    }
    get weekday() {
      return this[_date].weekday;
    }
    get timeZoneOffset() {
      return this[_date].timeZoneOffset;
    }
    isAfter(other) {
      if (other == null) dart.nullFailed(I[2], 1821, 30, "other");
      return dart.notNull(this[_date].millisecondsSinceEpoch) > dart.notNull(other[_date].millisecondsSinceEpoch);
    }
    isBefore(other) {
      if (other == null) dart.nullFailed(I[2], 1829, 31, "other");
      return dart.notNull(this[_date].millisecondsSinceEpoch) < dart.notNull(other[_date].millisecondsSinceEpoch);
    }
    isAtSameMomentAs(other) {
      if (other == null) dart.nullFailed(I[2], 1837, 39, "other");
      return this[_date].millisecondsSinceEpoch == other[_date].millisecondsSinceEpoch;
    }
    difference(other) {
      if (other == null) dart.nullFailed(I[2], 1845, 37, "other");
      return this[_date].difference(other[_date]);
    }
    compareTo(other) {
      if (other == null) dart.nullFailed(I[2], 1855, 31, "other");
      return this[_date].compareTo(other[_date]);
    }
    toString() {
      return dart.toString(this.year) + "-" + dart.notNull(this[_twoDigits](this.month)) + "-" + dart.notNull(this[_twoDigits](this.day));
    }
    [_twoDigits](n) {
      if (n == null) dart.nullFailed(I[2], 1864, 25, "n");
      if (dart.notNull(n) >= 10) {
        return dart.str(n);
      }
      return "0" + dart.str(n);
    }
    add(duration) {
      if (duration == null) dart.nullFailed(I[2], 1872, 30, "duration");
      return this[_add](duration);
    }
    [_getPreviousDate](date, day) {
      if (date == null) dart.nullFailed(I[2], 1877, 48, "date");
      if (day == null) dart.nullFailed(I[2], 1877, 58, "day");
      if (dart.notNull(day) <= 0) {
        date = core$.HijriDateTime.as(core$.getPreviousMonthDate(date));
        let monthLength = date.getNumberOfDatesInMonth();
        if (monthLength == null) {
          return date;
        }
        day = dart.notNull(monthLength) + dart.notNull(day);
        return this[_getPreviousDate](date, day);
      }
      return new core$.HijriDateTime.new(date.year, date.month, day);
    }
    [_getNextDate](monthLength, date, day) {
      if (date == null) dart.nullFailed(I[2], 1896, 62, "date");
      if (day == null) dart.nullFailed(I[2], 1896, 72, "day");
      if (monthLength != null && dart.notNull(day) > dart.notNull(monthLength)) {
        day = dart.notNull(day) - dart.notNull(monthLength);
        date = core$.HijriDateTime.as(core$.getNextMonthDate(date));
        monthLength = date.getNumberOfDatesInMonth();
        if (monthLength == null) {
          return date;
        }
        return this[_getNextDate](monthLength, date, day);
      }
      return new core$.HijriDateTime.new(date.year, date.month, day);
    }
    [_add](duration) {
      if (duration == null) dart.nullFailed(I[2], 1915, 31, "duration");
      let lengthOfMonth = this.getNumberOfDatesInMonth();
      if (lengthOfMonth == null) {
        return this;
      }
      let newDay = null;
      let addedDate = null;
      newDay = dart.notNull(duration.inDays) + dart.notNull(this.day);
      if (dart.notNull(newDay) > dart.notNull(lengthOfMonth)) {
        addedDate = this[_getNextDate](lengthOfMonth, this, newDay);
      } else if (dart.notNull(newDay) <= 0) {
        addedDate = this[_getPreviousDate](this, newDay);
      }
      if (addedDate != null) {
        return addedDate;
      }
      return new core$.HijriDateTime.new(this.year, this.month, newDay);
    }
    subtract(duration) {
      if (duration == null) dart.nullFailed(I[2], 1941, 35, "duration");
      return this[_add](duration._negate());
    }
    getNumberOfDatesInMonth() {
      let totalYear = dart.notNull(this.year) - 1;
      let totalMonths = totalYear * 12 + 1 + (dart.notNull(this.month) - 1);
      let i = totalMonths - 16260;
      if (dart.notNull(core$._kDateCollection[$length]) > i - 1 && i > 0) {
        return dart.notNull(core$._kDateCollection[$_get](i)) - dart.notNull(core$._kDateCollection[$_get](i - 1));
      }
      return null;
    }
    _equals(other) {
      if (other == null) return false;
      if (this === other) {
        return true;
      }
      if (!dart.equals(dart.runtimeType(other), this[$runtimeType])) {
        return false;
      }
      let otherStyle = core$.HijriDateTime.as(other);
      return otherStyle.month == this.month && otherStyle.year == this.year && otherStyle.day == this.day;
    }
    get hashCode() {
      return ui.hashValues(this.month, this.day, this.year);
    }
  };
  (core$.HijriDateTime.new = function(year, month, day) {
    if (year == null) dart.nullFailed(I[2], 1759, 22, "year");
    if (month == null) dart.nullFailed(I[2], 1759, 33, "month");
    if (day == null) dart.nullFailed(I[2], 1759, 45, "day");
    this[year$] = year;
    this[month$] = month;
    this[day$] = day;
    this[_date] = core$.convertToGregorianDate(null, {year: year, month: month, day: day});
    ;
  }).prototype = core$.HijriDateTime.prototype;
  dart.addTypeTests(core$.HijriDateTime);
  dart.addTypeCaches(core$.HijriDateTime);
  dart.setMethodSignature(core$.HijriDateTime, () => ({
    __proto__: dart.getMethods(core$.HijriDateTime.__proto__),
    toDateTime: dart.fnType(core.DateTime, []),
    isAfter: dart.fnType(core.bool, [core$.HijriDateTime]),
    isBefore: dart.fnType(core.bool, [core$.HijriDateTime]),
    isAtSameMomentAs: dart.fnType(core.bool, [core$.HijriDateTime]),
    difference: dart.fnType(core.Duration, [core$.HijriDateTime]),
    compareTo: dart.fnType(core.int, [core$.HijriDateTime]),
    [_twoDigits]: dart.fnType(core.String, [core.int]),
    add: dart.fnType(core$.HijriDateTime, [core.Duration]),
    [_getPreviousDate]: dart.fnType(core$.HijriDateTime, [core$.HijriDateTime, core.int]),
    [_getNextDate]: dart.fnType(core$.HijriDateTime, [dart.nullable(core.int), core$.HijriDateTime, core.int]),
    [_add]: dart.fnType(core$.HijriDateTime, [core.Duration]),
    subtract: dart.fnType(core$.HijriDateTime, [core.Duration]),
    getNumberOfDatesInMonth: dart.fnType(dart.nullable(core.int), []),
    _equals: dart.fnType(core.bool, [dart.dynamic]),
    [$_equals]: dart.fnType(core.bool, [dart.dynamic])
  }));
  dart.setGetterSignature(core$.HijriDateTime, () => ({
    __proto__: dart.getGetters(core$.HijriDateTime.__proto__),
    weekday: core.int,
    timeZoneOffset: core.Duration
  }));
  dart.setLibraryUri(core$.HijriDateTime, I[1]);
  dart.setFieldSignature(core$.HijriDateTime, () => ({
    __proto__: dart.getFields(core$.HijriDateTime.__proto__),
    [_date]: dart.finalFieldType(core.DateTime),
    year: dart.finalFieldType(core.int),
    month: dart.finalFieldType(core.int),
    day: dart.finalFieldType(core.int)
  }));
  dart.defineExtensionMethods(core$.HijriDateTime, ['toString', '_equals']);
  dart.defineExtensionAccessors(core$.HijriDateTime, ['hashCode']);
  var text$ = dart.privateName(core$, "TooltipRenderArgs.text");
  var header$ = dart.privateName(core$, "TooltipRenderArgs.header");
  var location$ = dart.privateName(core$, "TooltipRenderArgs.location");
  core$.TooltipRenderArgs = class TooltipRenderArgs extends core.Object {
    get text() {
      return this[text$];
    }
    set text(value) {
      this[text$] = value;
    }
    get header() {
      return this[header$];
    }
    set header(value) {
      this[header$] = value;
    }
    get location() {
      return this[location$];
    }
    set location(value) {
      this[location$] = value;
    }
  };
  (core$.TooltipRenderArgs.new = function(header, text, location) {
    this[header$] = header;
    this[text$] = text;
    this[location$] = location;
    ;
  }).prototype = core$.TooltipRenderArgs.prototype;
  dart.addTypeTests(core$.TooltipRenderArgs);
  dart.addTypeCaches(core$.TooltipRenderArgs);
  dart.setLibraryUri(core$.TooltipRenderArgs, I[1]);
  dart.setFieldSignature(core$.TooltipRenderArgs, () => ({
    __proto__: dart.getFields(core$.TooltipRenderArgs.__proto__),
    text: dart.fieldType(dart.nullable(core.String)),
    header: dart.fieldType(dart.nullable(core.String)),
    location: dart.fieldType(dart.nullable(ui.Offset))
  }));
  var _name$ = dart.privateName(core$, "_name");
  core$.TooltipAlignment = class TooltipAlignment extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.TooltipAlignment.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[3], 23, 6, "index");
    if (_name == null) dart.nullFailed(I[3], 23, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.TooltipAlignment.prototype;
  dart.addTypeTests(core$.TooltipAlignment);
  dart.addTypeCaches(core$.TooltipAlignment);
  dart.setLibraryUri(core$.TooltipAlignment, I[1]);
  dart.setFieldSignature(core$.TooltipAlignment, () => ({
    __proto__: dart.getFields(core$.TooltipAlignment.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.TooltipAlignment, ['toString']);
  core$.TooltipAlignment.near = C[0] || CT.C0;
  core$.TooltipAlignment.center = C[1] || CT.C1;
  core$.TooltipAlignment.far = C[2] || CT.C2;
  core$.TooltipAlignment.values = C[3] || CT.C3;
  core$.DataMarkerType = class DataMarkerType extends core.Object {
    toString() {
      return this[_name$];
    }
  };
  (core$.DataMarkerType.new = function(index, _name) {
    if (index == null) dart.nullFailed(I[3], 38, 6, "index");
    if (_name == null) dart.nullFailed(I[3], 38, 6, "_name");
    this.index = index;
    this[_name$] = _name;
    ;
  }).prototype = core$.DataMarkerType.prototype;
  dart.addTypeTests(core$.DataMarkerType);
  dart.addTypeCaches(core$.DataMarkerType);
  dart.setLibraryUri(core$.DataMarkerType, I[1]);
  dart.setFieldSignature(core$.DataMarkerType, () => ({
    __proto__: dart.getFields(core$.DataMarkerType.__proto__),
    index: dart.finalFieldType(core.int),
    [_name$]: dart.finalFieldType(core.String)
  }));
  dart.defineExtensionMethods(core$.DataMarkerType, ['toString']);
  core$.DataMarkerType.circle = C[4] || CT.C4;
  core$.DataMarkerType.rectangle = C[5] || CT.C5;
  core$.DataMarkerType.image = C[6] || CT.C6;
  core$.DataMarkerType.pentagon = C[7] || CT.C7;
  core$.DataMarkerType.verticalLine = C[8] || CT.C8;
  core$.DataMarkerType.horizontalLine = C[9] || CT.C9;
  core$.DataMarkerType.diamond = C[10] || CT.C10;
  core$.DataMarkerType.triangle = C[11] || CT.C11;
  core$.DataMarkerType.invertedTriangle = C[12] || CT.C12;
  core$.DataMarkerType.none = C[13] || CT.C13;
  core$.DataMarkerType.values = C[14] || CT.C14;
  core$.ShapeMaker = class ShapeMaker extends core.Object {
    static drawCircle(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 74, 12, "path");
      if (x == null) dart.nullFailed(I[3], 74, 25, "x");
      if (y == null) dart.nullFailed(I[3], 74, 35, "y");
      if (width == null) dart.nullFailed(I[3], 74, 45, "width");
      if (height == null) dart.nullFailed(I[3], 74, 59, "height");
      path.addArc(new ui.Rect.fromLTRB(dart.notNull(x) - dart.notNull(width) / 2, dart.notNull(y) - dart.notNull(height) / 2, dart.notNull(x) + dart.notNull(width) / 2, dart.notNull(y) + dart.notNull(height) / 2), 0.0, 2 * 3.141592653589793);
    }
    static drawRectangle(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 84, 12, "path");
      if (x == null) dart.nullFailed(I[3], 84, 25, "x");
      if (y == null) dart.nullFailed(I[3], 84, 35, "y");
      if (width == null) dart.nullFailed(I[3], 84, 45, "width");
      if (height == null) dart.nullFailed(I[3], 84, 59, "height");
      path.addRect(new ui.Rect.fromLTRB(dart.notNull(x) - dart.notNull(width) / 2, dart.notNull(y) - dart.notNull(height) / 2, dart.notNull(x) + dart.notNull(width) / 2, dart.notNull(y) + dart.notNull(height) / 2));
    }
    static drawPentagon(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 91, 12, "path");
      if (x == null) dart.nullFailed(I[3], 91, 25, "x");
      if (y == null) dart.nullFailed(I[3], 91, 35, "y");
      if (width == null) dart.nullFailed(I[3], 91, 45, "width");
      if (height == null) dart.nullFailed(I[3], 91, 59, "height");
      let xValue = null;
      let yValue = null;
      for (let i = 0; i <= 5; i = i + 1) {
        xValue = dart.notNull(width) / 2 * math.cos(3.141592653589793 / 180 * (i * 72));
        yValue = dart.notNull(height) / 2 * math.sin(3.141592653589793 / 180 * (i * 72));
        i === 0 ? path.moveTo(dart.notNull(x) + dart.notNull(xValue), dart.notNull(y) + dart.notNull(yValue)) : path.lineTo(dart.notNull(x) + dart.notNull(xValue), dart.notNull(y) + dart.notNull(yValue));
      }
      path.close();
    }
    static drawVerticalLine(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 107, 12, "path");
      if (x == null) dart.nullFailed(I[3], 107, 25, "x");
      if (y == null) dart.nullFailed(I[3], 107, 35, "y");
      if (width == null) dart.nullFailed(I[3], 107, 45, "width");
      if (height == null) dart.nullFailed(I[3], 107, 59, "height");
      path.moveTo(x, dart.notNull(y) + dart.notNull(height) / 2);
      path.lineTo(x, dart.notNull(y) - dart.notNull(height) / 2);
    }
    static drawInvertedTriangle(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 114, 12, "path");
      if (x == null) dart.nullFailed(I[3], 114, 25, "x");
      if (y == null) dart.nullFailed(I[3], 114, 35, "y");
      if (width == null) dart.nullFailed(I[3], 114, 45, "width");
      if (height == null) dart.nullFailed(I[3], 114, 59, "height");
      path.moveTo(dart.notNull(x) + dart.notNull(width) / 2, dart.notNull(y) - dart.notNull(height) / 2);
      path.lineTo(x, dart.notNull(y) + dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) - dart.notNull(width) / 2, dart.notNull(y) - dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) + dart.notNull(width) / 2, dart.notNull(y) - dart.notNull(height) / 2);
      path.close();
    }
    static drawHorizontalLine(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 125, 12, "path");
      if (x == null) dart.nullFailed(I[3], 125, 25, "x");
      if (y == null) dart.nullFailed(I[3], 125, 35, "y");
      if (width == null) dart.nullFailed(I[3], 125, 45, "width");
      if (height == null) dart.nullFailed(I[3], 125, 59, "height");
      path.moveTo(dart.notNull(x) - dart.notNull(width) / 2, y);
      path.lineTo(dart.notNull(x) + dart.notNull(width) / 2, y);
    }
    static drawDiamond(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 132, 12, "path");
      if (x == null) dart.nullFailed(I[3], 132, 25, "x");
      if (y == null) dart.nullFailed(I[3], 132, 35, "y");
      if (width == null) dart.nullFailed(I[3], 132, 45, "width");
      if (height == null) dart.nullFailed(I[3], 132, 59, "height");
      path.moveTo(dart.notNull(x) - dart.notNull(width) / 2, y);
      path.lineTo(x, dart.notNull(y) + dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) + dart.notNull(width) / 2, y);
      path.lineTo(x, dart.notNull(y) - dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) - dart.notNull(width) / 2, y);
      path.close();
    }
    static drawTriangle(path, x, y, width, height) {
      if (path == null) dart.nullFailed(I[3], 143, 12, "path");
      if (x == null) dart.nullFailed(I[3], 143, 25, "x");
      if (y == null) dart.nullFailed(I[3], 143, 35, "y");
      if (width == null) dart.nullFailed(I[3], 143, 45, "width");
      if (height == null) dart.nullFailed(I[3], 143, 59, "height");
      path.moveTo(dart.notNull(x) - dart.notNull(width) / 2, dart.notNull(y) + dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) + dart.notNull(width) / 2, dart.notNull(y) + dart.notNull(height) / 2);
      path.lineTo(x, dart.notNull(y) - dart.notNull(height) / 2);
      path.lineTo(dart.notNull(x) - dart.notNull(width) / 2, dart.notNull(y) + dart.notNull(height) / 2);
      path.close();
    }
  };
  (core$.ShapeMaker.new = function() {
    ;
  }).prototype = core$.ShapeMaker.prototype;
  dart.addTypeTests(core$.ShapeMaker);
  dart.addTypeCaches(core$.ShapeMaker);
  dart.setLibraryUri(core$.ShapeMaker, I[1]);
  core$.addDuration = function addDuration(date, duration) {
    if (duration == null) dart.nullFailed(I[4], 15, 44, "duration");
    let currentDate = dart.dsend(date, 'add', [duration]);
    if (!dart.equals(dart.dload(date, 'timeZoneOffset'), dart.dload(currentDate, 'timeZoneOffset'))) {
      currentDate = dart.dsend(currentDate, 'add', [dart.dsend(dart.dload(date, 'timeZoneOffset'), '-', [dart.dload(currentDate, 'timeZoneOffset')])]);
    }
    return currentDate;
  };
  core$.subtractDuration = function subtractDuration(date, duration) {
    if (duration == null) dart.nullFailed(I[4], 38, 49, "duration");
    let currentDate = dart.dsend(date, 'subtract', [duration]);
    if (!dart.equals(dart.dload(date, 'timeZoneOffset'), dart.dload(currentDate, 'timeZoneOffset'))) {
      currentDate = dart.dsend(currentDate, 'add', [dart.dsend(dart.dload(date, 'timeZoneOffset'), '-', [dart.dload(currentDate, 'timeZoneOffset')])]);
    }
    return currentDate;
  };
  core$.getPreviousMonthDate = function getPreviousMonthDate(date) {
    if (core$.HijriDateTime.is(date)) {
      return date.month === 1 ? new core$.HijriDateTime.new(dart.notNull(date.year) - 1, 12, 1) : new core$.HijriDateTime.new(date.year, dart.notNull(date.month) - 1, 1);
    }
    return dart.equals(dart.dload(date, 'month'), 1) ? new core.DateTime.new(core.int.as(dart.dsend(dart.dload(date, 'year'), '-', [1])), 12, 1) : new core.DateTime.new(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dsend(dart.dload(date, 'month'), '-', [1])), 1);
  };
  core$.getNextMonthDate = function getNextMonthDate(date) {
    if (core$.HijriDateTime.is(date)) {
      return date.month === 12 ? new core$.HijriDateTime.new(dart.notNull(date.year) + 1, 1, 1) : new core$.HijriDateTime.new(date.year, dart.notNull(date.month) + 1, 1);
    }
    return dart.equals(dart.dload(date, 'month'), 12) ? new core.DateTime.new(core.int.as(dart.dsend(dart.dload(date, 'year'), '+', [1])), 1, 1) : new core.DateTime.new(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dsend(dart.dload(date, 'month'), '+', [1])), 1);
  };
  core$.getValidDate = function getValidDate(minDate, maxDate, date) {
    if (dart.equals(dart.dsend(date, 'isAfter', [minDate]), true)) {
      if (dart.equals(dart.dsend(date, 'isBefore', [maxDate]), true)) {
        return date;
      } else {
        return maxDate;
      }
    } else {
      return minDate;
    }
  };
  core$.isSameDate = function isSameDate(date1, date2) {
    if (dart.equals(date2, date1)) {
      return true;
    }
    if (date1 == null || date2 == null) {
      return false;
    }
    if (core$.HijriDateTime.is(date1) && core$.HijriDateTime.is(date2)) {
      return date1.month == date2.month && date1.year == date2.year && date1.day == date2.day && dart.equals(date1[_date], date2[_date]);
    }
    return dart.equals(dart.dload(date1, 'month'), dart.dload(date2, 'month')) && dart.equals(dart.dload(date1, 'year'), dart.dload(date2, 'year')) && dart.equals(dart.dload(date1, 'day'), dart.dload(date2, 'day'));
  };
  core$.isDateWithInDateRange = function isDateWithInDateRange(startDate, endDate, date) {
    if (startDate == null || endDate == null || date == null) {
      return false;
    }
    if (dart.equals(dart.dsend(startDate, 'isAfter', [endDate]), true)) {
      let temp = startDate;
      startDate = endDate;
      endDate = temp;
    }
    if (dart.test(core$.isSameOrBeforeDate(endDate, date)) && dart.test(core$.isSameOrAfterDate(startDate, date))) {
      return true;
    }
    return false;
  };
  core$.isSameOrBeforeDate = function isSameOrBeforeDate(lastDate, date) {
    return dart.test(core$.isSameDate(lastDate, date)) || dart.equals(dart.dsend(lastDate, 'isAfter', [date]), true);
  };
  core$.isSameOrAfterDate = function isSameOrAfterDate(firstDate, date) {
    return dart.test(core$.isSameDate(firstDate, date)) || dart.equals(dart.dsend(firstDate, 'isBefore', [date]), true);
  };
  core$.getVisibleDates = function getVisibleDates(date, nonWorkingDays, firstDayOfWeek, visibleDatesCount) {
    if (firstDayOfWeek == null) dart.nullFailed(I[4], 141, 9, "firstDayOfWeek");
    if (visibleDatesCount == null) dart.nullFailed(I[4], 141, 29, "visibleDatesCount");
    let datesCollection = null;
    if (core$.HijriDateTime.is(date)) {
      datesCollection = T.JSArrayOfHijriDateTime().of([]);
    } else {
      datesCollection = T.JSArrayOfDateTime().of([]);
    }
    let currentDate = core$.getFirstDayOfWeekDate(visibleDatesCount, date, firstDayOfWeek);
    for (let i = 0; i < dart.notNull(visibleDatesCount); i = i + 1) {
      let visibleDate = core$.addDays(currentDate, i);
      if (nonWorkingDays != null && dart.test(nonWorkingDays[$contains](dart.dload(visibleDate, 'weekday')))) {
        continue;
      }
      datesCollection[$add](visibleDate);
    }
    return datesCollection;
  };
  core$.addDays = function addDays(date, days) {
    if (days == null) dart.nullFailed(I[4], 167, 35, "days");
    if (core$.HijriDateTime.is(date)) {
      return date.add(new core.Duration.new({days: days}));
    }
    return new core.DateTime.new(core.int.as(dart.dload(date, 'year')), core.int.as(dart.dload(date, 'month')), core.int.as(dart.dsend(dart.dload(date, 'day'), '+', [days])));
  };
  core$.getFirstDayOfWeekDate = function getFirstDayOfWeekDate(visibleDatesCount, date, firstDayOfWeek) {
    if (visibleDatesCount == null) dart.nullFailed(I[4], 178, 9, "visibleDatesCount");
    if (firstDayOfWeek == null) dart.nullFailed(I[4], 178, 46, "firstDayOfWeek");
    if (visibleDatesCount[$modulo](7) !== 0) {
      return date;
    }
    let currentDate = date;
    if (visibleDatesCount === 42) {
      if (core$.HijriDateTime.is(currentDate)) {
        currentDate = new core$.HijriDateTime.new(currentDate.year, currentDate.month, 1);
      } else {
        currentDate = new core.DateTime.new(core.int.as(dart.dload(currentDate, 'year')), core.int.as(dart.dload(currentDate, 'month')), 1);
      }
    }
    let value = -dart.notNull(core.int.as(dart.dload(currentDate, 'weekday'))) + dart.notNull(firstDayOfWeek) - 7;
    if (value[$abs]() >= 7) {
      value = value + 7;
    }
    currentDate = core$.addDays(currentDate, value);
    return currentDate;
  };
  core$.convertToHijriDate = function convertToHijriDate(date) {
    if (date == null) dart.nullFailed(I[2], 1983, 43, "date");
    let day = date.day;
    let month = date.month;
    let year = date.year;
    let tMonth = month;
    let tYear = year;
    if (dart.notNull(tMonth) < 3) {
      tYear = dart.notNull(tYear) - 1;
      tMonth = dart.notNull(tMonth) + 12;
    }
    let yPrefix = (dart.notNull(tYear) / 100)[$floor]();
    let julianOffset = yPrefix - (yPrefix / 4.0)[$floor]() - 2;
    let julianNumber = (365.25 * (dart.notNull(tYear) + 4716))[$floor]() + (30.6001 * (dart.notNull(tMonth) + 1))[$floor]() + dart.notNull(day) - julianOffset - 1524;
    yPrefix = ((julianNumber - 1867216.25) / 36524.25)[$floor]();
    julianOffset = yPrefix - (yPrefix / 4.0)[$floor]() + 1;
    let b = julianNumber + julianOffset + 1524;
    let c = ((b - 122.1) / 365.25)[$floor]();
    let d = (365.25 * c)[$floor]();
    let tempMonth = ((b - d) / 30.6001)[$floor]();
    day = b - d - (30.6001 * tempMonth)[$floor]();
    month = ((b - d) / 20.6001)[$floor]();
    if (dart.notNull(month) > 13) {
      c = c + 1;
      month = dart.notNull(month) - 12;
    }
    month = dart.notNull(month) - 1;
    year = c - 4716;
    let modifiedJulianDate = julianNumber - 2400000;
    let z = julianNumber - 1948084;
    let cyc = (z / 10631.0)[$floor]();
    z = z - 10631 * cyc;
    let j = ((z - 0.1335) / 354.3666666666667)[$floor]();
    let iy = 30 * cyc + j;
    z = z - (j * 354.3666666666667 + 0.1335)[$floor]();
    let im = ((z + 28.5001) / 29.5)[$floor]();
    if (im === 13) {
      im = 12;
    }
    let tempDay = z - (29.5001 * im - 29)[$floor]();
    let i = 0;
    for (; i < dart.notNull(core$._kDateCollection[$length]); i = i + 1) {
      if (dart.notNull(core$._kDateCollection[$_get](i)) > modifiedJulianDate) {
        break;
      }
    }
    let iln = i + 16260;
    let ii = ((iln - 1) / 12)[$floor]();
    let hYear = ii + 1;
    let hMonth = iln - 12 * ii;
    let hDate = modifiedJulianDate - dart.notNull(core$._kDateCollection[$_get](i - 1)) + 1;
    if ((hDate[$toString]() + "").length > 2) {
      hDate = tempDay;
      hMonth = im;
      hYear = iy;
    }
    return new core$.HijriDateTime.new(hYear, hMonth, hDate);
  };
  core$.convertToGregorianDate = function convertToGregorianDate(date, opts) {
    let year = opts && 'year' in opts ? opts.year : 0;
    if (year == null) dart.nullFailed(I[2], 2052, 10, "year");
    let month = opts && 'month' in opts ? opts.month : 0;
    if (month == null) dart.nullFailed(I[2], 2052, 24, "month");
    let day = opts && 'day' in opts ? opts.day : 0;
    if (day == null) dart.nullFailed(I[2], 2052, 39, "day");
    if (date != null) {
      return date[_date];
    }
    if (!(year !== 0)) dart.assertFailed(null, I[2], 2057, 10, "year != 0");
    if (!(month !== 0)) dart.assertFailed(null, I[2], 2058, 10, "month != 0");
    if (!(day !== 0)) dart.assertFailed(null, I[2], 2059, 10, "day != 0");
    if (dart.notNull(year) > 1500) {
      return new core.DateTime.new(2077, 11, 16);
    } else if (dart.notNull(year) < 1356) {
      return new core.DateTime.new(1937, 3, 14);
    }
    let iy = year;
    let im = month;
    let id = day;
    let ii = dart.notNull(iy) - 1;
    let iln = ii * 12 + 1 + (dart.notNull(im) - 1);
    let i = iln - 16260;
    let mcjdn = dart.notNull(id) + dart.notNull(core$._kDateCollection[$_get](i - 1)) - 1;
    let julianDate = mcjdn + 2400000;
    let z = (julianDate + 0.5)[$floor]();
    let a = ((z - 1867216.25) / 36524.25)[$floor]();
    a = z + 1 + a - (a / 4)[$floor]();
    let b = a + 1524;
    let c = ((b - 122.1) / 365.25)[$floor]();
    let d = (365.25 * c)[$floor]();
    let e = ((b - d) / 30.6001)[$floor]();
    let gDay = b - d - (e * 30.6001)[$floor]();
    let gMonth = e - (e > 13.5 ? 13 : 1);
    let gYear = c - (gMonth > 2.5 ? 4716 : 4715);
    if (gYear <= 0) {
      gMonth = gMonth - 1;
    }
    return new core.DateTime.new(gYear, gMonth, gDay);
  };
  core$.measureText = function measureText(textValue, textStyle, angle = null) {
    if (textValue == null) dart.nullFailed(I[3], 153, 25, "textValue");
    if (textStyle == null) dart.nullFailed(I[3], 153, 46, "textStyle");
    let size = null;
    let textPainter = new text_painter.TextPainter.new({textAlign: ui.TextAlign.center, textDirection: ui.TextDirection.ltr, text: new text_span.TextSpan.new({text: textValue, style: textStyle})});
    textPainter.layout();
    if (angle != null) {
      let rect = core$.rotatedTextSize(textPainter.size, angle);
      size = new ui.Size.new(rect.width, rect.height);
    } else {
      size = new ui.Size.new(textPainter.width, textPainter.height);
    }
    return size;
  };
  core$.rotatedTextSize = function rotatedTextSize(size, angle) {
    if (size == null) dart.nullFailed(I[3], 171, 27, "size");
    if (angle == null) dart.nullFailed(I[3], 171, 37, "angle");
    let rect = new ui.Rect.fromLTWH(0.0, 0.0, size.width, size.height);
    let _rotatorMatrix = vector_math.Matrix2.rotation(core$.degreeToRadian(angle));
    let movedToCenterAsOrigin = rect.shift(rect.center._negate());
    let _topLeft = movedToCenterAsOrigin.topLeft;
    let _topRight = movedToCenterAsOrigin.topRight;
    let _bottomLeft = movedToCenterAsOrigin.bottomLeft;
    let _bottomRight = movedToCenterAsOrigin.bottomRight;
    _topLeft = core$.transform(_rotatorMatrix, _topLeft);
    _topRight = core$.transform(_rotatorMatrix, _topRight);
    _bottomLeft = core$.transform(_rotatorMatrix, _bottomLeft);
    _bottomRight = core$.transform(_rotatorMatrix, _bottomRight);
    let rotOffsets = T.JSArrayOfOffset().of([_topLeft, _topRight, _bottomLeft, _bottomRight]);
    let minX = rotOffsets[$map](core.double, dart.fn(offset => {
      if (offset == null) dart.nullFailed(I[3], 196, 30, "offset");
      return offset.dx;
    }, T.OffsetTodouble()))[$reduce](dart.gbind(C[15] || CT.C15, core.double));
    let maxX = rotOffsets[$map](core.double, dart.fn(offset => {
      if (offset == null) dart.nullFailed(I[3], 198, 30, "offset");
      return offset.dx;
    }, T.OffsetTodouble()))[$reduce](dart.gbind(C[16] || CT.C16, core.double));
    let minY = rotOffsets[$map](core.double, dart.fn(offset => {
      if (offset == null) dart.nullFailed(I[3], 200, 30, "offset");
      return offset.dy;
    }, T.OffsetTodouble()))[$reduce](dart.gbind(C[15] || CT.C15, core.double));
    let maxY = rotOffsets[$map](core.double, dart.fn(offset => {
      if (offset == null) dart.nullFailed(I[3], 202, 30, "offset");
      return offset.dy;
    }, T.OffsetTodouble()))[$reduce](dart.gbind(C[16] || CT.C16, core.double));
    let rotateRect = new ui.Rect.fromPoints(new ui.Offset.new(minX, minY), new ui.Offset.new(maxX, maxY));
    return rotateRect;
  };
  core$.degreeToRadian = function degreeToRadian(deg) {
    if (deg == null) dart.nullFailed(I[3], 212, 27, "deg");
    return dart.notNull(deg) * (3.141592653589793 / 180);
  };
  core$.offsetToVector2 = function offsetToVector2(offset) {
    if (offset == null) dart.nullFailed(I[3], 215, 39, "offset");
    return vector_math.Vector2.new(offset.dx, offset.dy);
  };
  core$.vector2ToOffset = function vector2ToOffset(vector) {
    if (vector == null) dart.nullFailed(I[3], 219, 39, "vector");
    return new ui.Offset.new(vector.x, vector.y);
  };
  core$.transform = function transform(matrix, offset) {
    if (matrix == null) dart.nullFailed(I[3], 223, 18, "matrix");
    if (offset == null) dart.nullFailed(I[3], 224, 10, "offset");
    return core$.vector2ToOffset(vector_math.Vector2.as(matrix['*'](core$.offsetToVector2(offset))));
  };
  core$.getMaxLinesContent = function getMaxLinesContent(text) {
    return text != null && text[$isNotEmpty] && text[$contains]("\n") ? text[$split]("\n")[$length] : 1;
  };
  dart.defineLazy(core$, {
    /*core$._kDateCollection*/get _kDateCollection() {
      return C[17] || CT.C17;
    }
  }, false);
  dart.trackLibraries("packages/syncfusion_flutter_core/core.dart", {
    "package:syncfusion_flutter_core/core.dart": core$
  }, {
    "package:syncfusion_flutter_core/core.dart": ["./src/license.dart", "./src/calendar/calendar_helper.dart", "./src/calendar/hijri_date_time.dart", "./src/utils/helper.dart"]
  }, '{"version":3,"sourceRoot":"","sources":["src/license.dart","src/calendar/hijri_date_time.dart","src/utils/helper.dart","src/calendar/calendar_helper.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../G:/packages/syncfusion_flutter_core/core.dart.lib.js"}');
  // Exports:
  return {
    core: core$
  };
}));

//# sourceMappingURL=core.dart.lib.js.map
