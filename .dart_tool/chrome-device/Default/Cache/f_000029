define(['dart_sdk', 'packages/flutter/src/services/system_channels.dart'], (function load__packages__tflite__tflite_dart(dart_sdk, packages__flutter__src__services__system_channels$46dart) {
  'use strict';
  const core = dart_sdk.core;
  const _js_helper = dart_sdk._js_helper;
  const async = dart_sdk.async;
  const typed_data = dart_sdk.typed_data;
  const ui = dart_sdk.ui;
  const _interceptors = dart_sdk._interceptors;
  const dart = dart_sdk.dart;
  const dartx = dart_sdk.dartx;
  const platform_channel = packages__flutter__src__services__system_channels$46dart.src__services__platform_channel;
  const message_codecs = packages__flutter__src__services__system_channels$46dart.src__services__message_codecs;
  var tflite = Object.create(dart.library);
  dart._checkModuleNullSafetyMode(false);
  var T = {
    IdentityMapOfString$Object: () => (T.IdentityMapOfString$Object = dart.constFn(_js_helper.IdentityMap$(core.String, core.Object)))(),
    StringN: () => (T.StringN = dart.constFn(dart.nullable(core.String)))(),
    ListN: () => (T.ListN = dart.constFn(dart.nullable(core.List)))(),
    doubleL: () => (T.doubleL = dart.constFn(dart.legacy(core.double)))(),
    Uint8ListN: () => (T.Uint8ListN = dart.constFn(dart.nullable(typed_data.Uint8List)))(),
    JSArrayOfint: () => (T.JSArrayOfint = dart.constFn(_interceptors.JSArray$(core.int)))()
  };
  var T$Eval = Object.assign({
    _: () => T$Eval
  }, T);
  var S = {
    _: () => S
  };
  var S$Eval = Object.assign({
    _: () => S$Eval
  }, S);
  const CT = Object.create({
    _: () => (C, CT)
  });
  dart.defineLazy(CT, {
    get C0() {
      return C[0] = dart.constList([0.57273, 0.677385, 1.87446, 2.06253, 3.33843, 5.47434, 7.88282, 3.52778, 9.77052, 9.16828], T.doubleL());
    },
    get C3() {
      return C[3] = dart.const({
        __proto__: message_codecs.StandardMessageCodec.prototype
      });
    },
    get C2() {
      return C[2] = dart.const({
        __proto__: message_codecs.StandardMethodCodec.prototype,
        [StandardMethodCodec_messageCodec]: C[3] || CT.C3
      });
    },
    get C1() {
      return C[1] = dart.const({
        __proto__: platform_channel.MethodChannel.prototype,
        [MethodChannel__binaryMessenger]: null,
        [MethodChannel_codec]: C[2] || CT.C2,
        [MethodChannel_name]: "tflite"
      });
    }
  }, false);
  var C = Array(4).fill(void 0);
  var I = [
    "file:///C:/Users/Acer/AppData/Local/Pub/Cache/hosted/pub.dartlang.org/tflite-1.1.2/lib/tflite.dart",
    "package:tflite/tflite.dart"
  ];
  var MethodChannel__binaryMessenger = dart.privateName(platform_channel, "MethodChannel._binaryMessenger");
  var StandardMethodCodec_messageCodec = dart.privateName(message_codecs, "StandardMethodCodec.messageCodec");
  var MethodChannel_codec = dart.privateName(platform_channel, "MethodChannel.codec");
  var MethodChannel_name = dart.privateName(platform_channel, "MethodChannel.name");
  tflite.Tflite = class Tflite extends core.Object {
    static loadModel(opts) {
      let model = opts && 'model' in opts ? opts.model : null;
      if (model == null) dart.nullFailed(I[0], 10, 24, "model");
      let labels = opts && 'labels' in opts ? opts.labels : "";
      if (labels == null) dart.nullFailed(I[0], 11, 14, "labels");
      let numThreads = opts && 'numThreads' in opts ? opts.numThreads : 1;
      if (numThreads == null) dart.nullFailed(I[0], 12, 11, "numThreads");
      let isAsset = opts && 'isAsset' in opts ? opts.isAsset : true;
      if (isAsset == null) dart.nullFailed(I[0], 13, 12, "isAsset");
      let useGpuDelegate = opts && 'useGpuDelegate' in opts ? opts.useGpuDelegate : false;
      if (useGpuDelegate == null) dart.nullFailed(I[0], 14, 12, "useGpuDelegate");
      return async.async(T.StringN(), function* loadModel() {
        return yield tflite.Tflite._channel.invokeMethod(core.String, "loadModel", new (T.IdentityMapOfString$Object()).from(["model", model, "labels", labels, "numThreads", numThreads, "isAsset", isAsset, "useGpuDelegate", useGpuDelegate]));
      });
    }
    static runModelOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 28, 24, "path");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 117;
      if (imageMean == null) dart.nullFailed(I[0], 29, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 1;
      if (imageStd == null) dart.nullFailed(I[0], 30, 14, "imageStd");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 31, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 32, 14, "threshold");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 33, 12, "asynch");
      return async.async(T.ListN(), function* runModelOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runModelOnImage", new (T.IdentityMapOfString$Object()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static runModelOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      if (binary == null) dart.nullFailed(I[0], 48, 27, "binary");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 49, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 50, 14, "threshold");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 51, 12, "asynch");
      return async.async(T.ListN(), function* runModelOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runModelOnBinary", new (T.IdentityMapOfString$Object()).from(["binary", binary, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static runModelOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      if (bytesList == null) dart.nullFailed(I[0], 64, 33, "bytesList");
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      if (imageHeight == null) dart.nullFailed(I[0], 65, 11, "imageHeight");
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      if (imageWidth == null) dart.nullFailed(I[0], 66, 11, "imageWidth");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      if (imageMean == null) dart.nullFailed(I[0], 67, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      if (imageStd == null) dart.nullFailed(I[0], 68, 14, "imageStd");
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      if (rotation == null) dart.nullFailed(I[0], 69, 11, "rotation");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 70, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 71, 14, "threshold");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 72, 12, "asynch");
      return async.async(T.ListN(), function* runModelOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runModelOnFrame", new (T.IdentityMapOfString$Object()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "numResults", numResults, "threshold", threshold, "asynch", asynch]));
      });
    }
    static detectObjectOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 103, 21, "path");
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      if (model == null) dart.nullFailed(I[0], 104, 12, "model");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      if (imageMean == null) dart.nullFailed(I[0], 105, 12, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      if (imageStd == null) dart.nullFailed(I[0], 106, 12, "imageStd");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 107, 12, "threshold");
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      if (numResultsPerClass == null) dart.nullFailed(I[0], 108, 9, "numResultsPerClass");
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      if (anchors == null) dart.nullFailed(I[0], 110, 10, "anchors");
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      if (blockSize == null) dart.nullFailed(I[0], 111, 9, "blockSize");
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      if (numBoxesPerBlock == null) dart.nullFailed(I[0], 112, 9, "numBoxesPerBlock");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 113, 10, "asynch");
      return async.async(T.ListN(), function* detectObjectOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "detectObjectOnImage", new (T.IdentityMapOfString$Object()).from(["path", path, "model", model, "imageMean", imageMean, "imageStd", imageStd, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static detectObjectOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      if (binary == null) dart.nullFailed(I[0], 133, 24, "binary");
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      if (model == null) dart.nullFailed(I[0], 134, 12, "model");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 135, 12, "threshold");
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      if (numResultsPerClass == null) dart.nullFailed(I[0], 136, 9, "numResultsPerClass");
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      if (anchors == null) dart.nullFailed(I[0], 138, 10, "anchors");
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      if (blockSize == null) dart.nullFailed(I[0], 139, 9, "blockSize");
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      if (numBoxesPerBlock == null) dart.nullFailed(I[0], 140, 9, "numBoxesPerBlock");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 141, 10, "asynch");
      return async.async(T.ListN(), function* detectObjectOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "detectObjectOnBinary", new (T.IdentityMapOfString$Object()).from(["binary", binary, "model", model, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static detectObjectOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      if (bytesList == null) dart.nullFailed(I[0], 159, 30, "bytesList");
      let model = opts && 'model' in opts ? opts.model : "SSDMobileNet";
      if (model == null) dart.nullFailed(I[0], 160, 12, "model");
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      if (imageHeight == null) dart.nullFailed(I[0], 161, 9, "imageHeight");
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      if (imageWidth == null) dart.nullFailed(I[0], 162, 9, "imageWidth");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      if (imageMean == null) dart.nullFailed(I[0], 163, 12, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      if (imageStd == null) dart.nullFailed(I[0], 164, 12, "imageStd");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.1;
      if (threshold == null) dart.nullFailed(I[0], 165, 12, "threshold");
      let numResultsPerClass = opts && 'numResultsPerClass' in opts ? opts.numResultsPerClass : 5;
      if (numResultsPerClass == null) dart.nullFailed(I[0], 166, 9, "numResultsPerClass");
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      if (rotation == null) dart.nullFailed(I[0], 167, 9, "rotation");
      let anchors = opts && 'anchors' in opts ? opts.anchors : C[0] || CT.C0;
      if (anchors == null) dart.nullFailed(I[0], 169, 10, "anchors");
      let blockSize = opts && 'blockSize' in opts ? opts.blockSize : 32;
      if (blockSize == null) dart.nullFailed(I[0], 170, 9, "blockSize");
      let numBoxesPerBlock = opts && 'numBoxesPerBlock' in opts ? opts.numBoxesPerBlock : 5;
      if (numBoxesPerBlock == null) dart.nullFailed(I[0], 171, 9, "numBoxesPerBlock");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 172, 10, "asynch");
      return async.async(T.ListN(), function* detectObjectOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "detectObjectOnFrame", new (T.IdentityMapOfString$Object()).from(["bytesList", bytesList, "model", model, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "threshold", threshold, "numResultsPerClass", numResultsPerClass, "anchors", anchors, "blockSize", blockSize, "numBoxesPerBlock", numBoxesPerBlock, "asynch", asynch]));
      });
    }
    static close() {
      return async.async(dart.dynamic, function* close() {
        return yield tflite.Tflite._channel.invokeMethod(dart.dynamic, "close");
      });
    }
    static runPix2PixOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 199, 24, "path");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      if (imageMean == null) dart.nullFailed(I[0], 200, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      if (imageStd == null) dart.nullFailed(I[0], 201, 14, "imageStd");
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 202, 14, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 203, 12, "asynch");
      return async.async(T.Uint8ListN(), function* runPix2PixOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runPix2PixOnImage", new (T.IdentityMapOfString$Object()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runPix2PixOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      if (binary == null) dart.nullFailed(I[0], 217, 27, "binary");
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 218, 14, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 219, 12, "asynch");
      return async.async(T.Uint8ListN(), function* runPix2PixOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runPix2PixOnBinary", new (T.IdentityMapOfString$Object()).from(["binary", binary, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runPix2PixOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      if (bytesList == null) dart.nullFailed(I[0], 231, 30, "bytesList");
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      if (imageHeight == null) dart.nullFailed(I[0], 232, 9, "imageHeight");
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      if (imageWidth == null) dart.nullFailed(I[0], 233, 9, "imageWidth");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      if (imageMean == null) dart.nullFailed(I[0], 234, 12, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      if (imageStd == null) dart.nullFailed(I[0], 235, 12, "imageStd");
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      if (rotation == null) dart.nullFailed(I[0], 236, 9, "rotation");
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 237, 12, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 238, 10, "asynch");
      return async.async(T.Uint8ListN(), function* runPix2PixOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runPix2PixOnFrame", new (T.IdentityMapOfString$Object()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "asynch", asynch, "outputType", outputType]));
      });
    }
    static runSegmentationOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 281, 24, "path");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      if (imageMean == null) dart.nullFailed(I[0], 282, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      if (imageStd == null) dart.nullFailed(I[0], 283, 14, "imageStd");
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 285, 14, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 286, 12, "asynch");
      return async.async(T.Uint8ListN(), function* runSegmentationOnImage() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runSegmentationOnImage", new (T.IdentityMapOfString$Object()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runSegmentationOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      if (binary == null) dart.nullFailed(I[0], 301, 27, "binary");
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 303, 14, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 304, 12, "asynch");
      return async.async(T.Uint8ListN(), function* runSegmentationOnBinary() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runSegmentationOnBinary", new (T.IdentityMapOfString$Object()).from(["binary", binary, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runSegmentationOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      if (bytesList == null) dart.nullFailed(I[0], 317, 33, "bytesList");
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      if (imageHeight == null) dart.nullFailed(I[0], 318, 11, "imageHeight");
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      if (imageWidth == null) dart.nullFailed(I[0], 319, 11, "imageWidth");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 0;
      if (imageMean == null) dart.nullFailed(I[0], 320, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 255;
      if (imageStd == null) dart.nullFailed(I[0], 321, 14, "imageStd");
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      if (rotation == null) dart.nullFailed(I[0], 322, 11, "rotation");
      let labelColors = opts && 'labelColors' in opts ? opts.labelColors : null;
      let outputType = opts && 'outputType' in opts ? opts.outputType : "png";
      if (outputType == null) dart.nullFailed(I[0], 324, 14, "outputType");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 325, 12, "asynch");
      return async.async(T.Uint8ListN(), function* runSegmentationOnFrame() {
        let t0;
        return yield tflite.Tflite._channel.invokeMethod(typed_data.Uint8List, "runSegmentationOnFrame", new (T.IdentityMapOfString$Object()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "labelColors", (t0 = labelColors, t0 == null ? tflite.Tflite.pascalVOCLabelColors : t0), "outputType", outputType, "asynch", asynch]));
      });
    }
    static runPoseNetOnImage(opts) {
      let path = opts && 'path' in opts ? opts.path : null;
      if (path == null) dart.nullFailed(I[0], 343, 24, "path");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      if (imageMean == null) dart.nullFailed(I[0], 344, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      if (imageStd == null) dart.nullFailed(I[0], 345, 14, "imageStd");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 346, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      if (threshold == null) dart.nullFailed(I[0], 347, 14, "threshold");
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      if (nmsRadius == null) dart.nullFailed(I[0], 348, 11, "nmsRadius");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 349, 12, "asynch");
      return async.async(T.ListN(), function* runPoseNetOnImage() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runPoseNetOnImage", new (T.IdentityMapOfString$Object()).from(["path", path, "imageMean", imageMean, "imageStd", imageStd, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
    static runPoseNetOnBinary(opts) {
      let binary = opts && 'binary' in opts ? opts.binary : null;
      if (binary == null) dart.nullFailed(I[0], 365, 27, "binary");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 366, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      if (threshold == null) dart.nullFailed(I[0], 367, 14, "threshold");
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      if (nmsRadius == null) dart.nullFailed(I[0], 368, 11, "nmsRadius");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 369, 12, "asynch");
      return async.async(T.ListN(), function* runPoseNetOnBinary() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runPoseNetOnBinary", new (T.IdentityMapOfString$Object()).from(["binary", binary, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
    static runPoseNetOnFrame(opts) {
      let bytesList = opts && 'bytesList' in opts ? opts.bytesList : null;
      if (bytesList == null) dart.nullFailed(I[0], 383, 33, "bytesList");
      let imageHeight = opts && 'imageHeight' in opts ? opts.imageHeight : 1280;
      if (imageHeight == null) dart.nullFailed(I[0], 384, 11, "imageHeight");
      let imageWidth = opts && 'imageWidth' in opts ? opts.imageWidth : 720;
      if (imageWidth == null) dart.nullFailed(I[0], 385, 11, "imageWidth");
      let imageMean = opts && 'imageMean' in opts ? opts.imageMean : 127.5;
      if (imageMean == null) dart.nullFailed(I[0], 386, 14, "imageMean");
      let imageStd = opts && 'imageStd' in opts ? opts.imageStd : 127.5;
      if (imageStd == null) dart.nullFailed(I[0], 387, 14, "imageStd");
      let rotation = opts && 'rotation' in opts ? opts.rotation : 90;
      if (rotation == null) dart.nullFailed(I[0], 388, 11, "rotation");
      let numResults = opts && 'numResults' in opts ? opts.numResults : 5;
      if (numResults == null) dart.nullFailed(I[0], 389, 11, "numResults");
      let threshold = opts && 'threshold' in opts ? opts.threshold : 0.5;
      if (threshold == null) dart.nullFailed(I[0], 390, 14, "threshold");
      let nmsRadius = opts && 'nmsRadius' in opts ? opts.nmsRadius : 20;
      if (nmsRadius == null) dart.nullFailed(I[0], 391, 11, "nmsRadius");
      let asynch = opts && 'asynch' in opts ? opts.asynch : true;
      if (asynch == null) dart.nullFailed(I[0], 392, 12, "asynch");
      return async.async(T.ListN(), function* runPoseNetOnFrame() {
        return yield tflite.Tflite._channel.invokeMethod(core.List, "runPoseNetOnFrame", new (T.IdentityMapOfString$Object()).from(["bytesList", bytesList, "imageHeight", imageHeight, "imageWidth", imageWidth, "imageMean", imageMean, "imageStd", imageStd, "rotation", rotation, "numResults", numResults, "threshold", threshold, "nmsRadius", nmsRadius, "asynch", asynch]));
      });
    }
  };
  (tflite.Tflite.new = function() {
    ;
  }).prototype = tflite.Tflite.prototype;
  dart.addTypeTests(tflite.Tflite);
  dart.addTypeCaches(tflite.Tflite);
  dart.setLibraryUri(tflite.Tflite, I[1]);
  dart.defineLazy(tflite.Tflite, {
    /*tflite.Tflite._channel*/get _channel() {
      return C[1] || CT.C1;
    },
    /*tflite.Tflite.anchors*/get anchors() {
      return C[0] || CT.C0;
    },
    /*tflite.Tflite.pascalVOCLabelColors*/get pascalVOCLabelColors() {
      return T.JSArrayOfint().of([new ui.Color.fromARGB(255, 0, 0, 0).value, new ui.Color.fromARGB(255, 128, 0, 0).value, new ui.Color.fromARGB(255, 0, 128, 0).value, new ui.Color.fromARGB(255, 128, 128, 0).value, new ui.Color.fromARGB(255, 0, 0, 128).value, new ui.Color.fromARGB(255, 128, 0, 128).value, new ui.Color.fromARGB(255, 0, 128, 128).value, new ui.Color.fromARGB(255, 128, 128, 128).value, new ui.Color.fromARGB(255, 64, 0, 0).value, new ui.Color.fromARGB(255, 192, 0, 0).value, new ui.Color.fromARGB(255, 64, 128, 0).value, new ui.Color.fromARGB(255, 192, 128, 0).value, new ui.Color.fromARGB(255, 64, 0, 128).value, new ui.Color.fromARGB(255, 192, 0, 128).value, new ui.Color.fromARGB(255, 64, 128, 128).value, new ui.Color.fromARGB(255, 192, 128, 128).value, new ui.Color.fromARGB(255, 0, 64, 0).value, new ui.Color.fromARGB(255, 128, 64, 0).value, new ui.Color.fromARGB(255, 0, 192, 0).value, new ui.Color.fromARGB(255, 128, 192, 0).value, new ui.Color.fromARGB(255, 0, 64, 128).value]);
    },
    set pascalVOCLabelColors(_) {}
  }, false);
  dart.trackLibraries("packages/tflite/tflite.dart", {
    "package:tflite/tflite.dart": tflite
  }, {
  }, '{"version":3,"sourceRoot":"","sources":["tflite.dart"],"names":[],"mappings":"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","file":"../../../../../../../../../../../G:/packages/tflite/tflite.dart.lib.js"}');
  // Exports:
  return {
    tflite: tflite
  };
}));

//# sourceMappingURL=tflite.dart.lib.js.map
